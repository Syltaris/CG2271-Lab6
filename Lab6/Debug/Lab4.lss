
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  0000227e  00002312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000227e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000749  00800150  00800150  00002362  2**0
                  ALLOC
  3 .stab         00009d44  00000000  00000000  00002364  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00006f17  00000000  00000000  0000c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00012fbf  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	5e c0       	rjmp	.+188    	; 0xbe <__ctors_end>
       2:	00 00       	nop
       4:	7f c7       	rjmp	.+3838   	; 0xf04 <__vector_1>
       6:	00 00       	nop
       8:	ad c7       	rjmp	.+3930   	; 0xf64 <__vector_2>
       a:	00 00       	nop
       c:	7f c0       	rjmp	.+254    	; 0x10c <__bad_interrupt>
       e:	00 00       	nop
      10:	7d c0       	rjmp	.+250    	; 0x10c <__bad_interrupt>
      12:	00 00       	nop
      14:	7b c0       	rjmp	.+246    	; 0x10c <__bad_interrupt>
      16:	00 00       	nop
      18:	79 c0       	rjmp	.+242    	; 0x10c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	fb c6       	rjmp	.+3574   	; 0xe14 <__vector_7>
      1e:	00 00       	nop
      20:	75 c0       	rjmp	.+234    	; 0x10c <__bad_interrupt>
      22:	00 00       	nop
      24:	73 c0       	rjmp	.+230    	; 0x10c <__bad_interrupt>
      26:	00 00       	nop
      28:	71 c0       	rjmp	.+226    	; 0x10c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 ad 10 	jmp	0x215a	; 0x215a <__vector_11>
      30:	6d c0       	rjmp	.+218    	; 0x10c <__bad_interrupt>
      32:	00 00       	nop
      34:	6b c0       	rjmp	.+214    	; 0x10c <__bad_interrupt>
      36:	00 00       	nop
      38:	69 c0       	rjmp	.+210    	; 0x10c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	67 c0       	rjmp	.+206    	; 0x10c <__bad_interrupt>
      3e:	00 00       	nop
      40:	e3 c7       	rjmp	.+4038   	; 0x1008 <__vector_16>
      42:	00 00       	nop
      44:	63 c0       	rjmp	.+198    	; 0x10c <__bad_interrupt>
      46:	00 00       	nop
      48:	73 c3       	rjmp	.+1766   	; 0x730 <__vector_18>
      4a:	00 00       	nop
      4c:	9e c3       	rjmp	.+1852   	; 0x78a <__vector_19>
      4e:	00 00       	nop
      50:	5d c0       	rjmp	.+186    	; 0x10c <__bad_interrupt>
      52:	00 00       	nop
      54:	5b c0       	rjmp	.+182    	; 0x10c <__bad_interrupt>
      56:	00 00       	nop
      58:	59 c0       	rjmp	.+178    	; 0x10c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	57 c0       	rjmp	.+174    	; 0x10c <__bad_interrupt>
      5e:	00 00       	nop
      60:	55 c0       	rjmp	.+170    	; 0x10c <__bad_interrupt>
      62:	00 00       	nop
      64:	53 c0       	rjmp	.+166    	; 0x10c <__bad_interrupt>
	...

00000068 <__trampolines_end>:
      68:	02 00       	.word	0x0002	; ????

00000069 <port_to_mode_PGM>:
      69:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000073 <port_to_output_PGM>:
      73:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007d <digital_pin_to_port_PGM>:
      7d:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      8d:	03 03 03 03                                         ....

00000091 <digital_pin_to_bit_mask_PGM>:
      91:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      a1:	04 08 10 20                                         ... 

000000a5 <digital_pin_to_timer_PGM>:
      a5:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      b5:	00 00 00 00 00                                      .....

000000ba <__ctors_start>:
      ba:	3e 04       	cpc	r3, r14
      bc:	0f 05       	cpc	r16, r15

000000be <__ctors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf ef       	ldi	r28, 0xFF	; 255
      c4:	d8 e0       	ldi	r29, 0x08	; 8
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	11 e0       	ldi	r17, 0x01	; 1
      cc:	a0 e0       	ldi	r26, 0x00	; 0
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	ee e7       	ldi	r30, 0x7E	; 126
      d2:	f2 e2       	ldi	r31, 0x22	; 34
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
      d6:	05 90       	lpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	a0 35       	cpi	r26, 0x50	; 80
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
      e0:	28 e0       	ldi	r18, 0x08	; 8
      e2:	a0 e5       	ldi	r26, 0x50	; 80
      e4:	b1 e0       	ldi	r27, 0x01	; 1
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	a9 39       	cpi	r26, 0x99	; 153
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>

000000f0 <__do_global_ctors>:
      f0:	10 e0       	ldi	r17, 0x00	; 0
      f2:	ce eb       	ldi	r28, 0xBE	; 190
      f4:	d0 e0       	ldi	r29, 0x00	; 0
      f6:	04 c0       	rjmp	.+8      	; 0x100 <__do_global_ctors+0x10>
      f8:	22 97       	sbiw	r28, 0x02	; 2
      fa:	fe 01       	movw	r30, r28
      fc:	0e 94 2c 11 	call	0x2258	; 0x2258 <__tablejump__>
     100:	ca 3b       	cpi	r28, 0xBA	; 186
     102:	d1 07       	cpc	r29, r17
     104:	c9 f7       	brne	.-14     	; 0xf8 <__do_global_ctors+0x8>
     106:	72 d7       	rcall	.+3812   	; 0xfec <main>
     108:	0c 94 3d 11 	jmp	0x227a	; 0x227a <_exit>

0000010c <__bad_interrupt>:
     10c:	79 cf       	rjmp	.-270    	; 0x0 <__vectors>

0000010e <_Z14serialEventRunv>:
  void serialEvent3() __attribute__((weak));
  bool Serial3_available() __attribute__((weak));
#endif

void serialEventRun(void)
{
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     116:	82 ef       	ldi	r24, 0xF2	; 242
     118:	93 e0       	ldi	r25, 0x03	; 3
     11a:	00 97       	sbiw	r24, 0x00	; 0
     11c:	49 f0       	breq	.+18     	; 0x130 <_Z14serialEventRunv+0x22>
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	00 97       	sbiw	r24, 0x00	; 0
     124:	29 f0       	breq	.+10     	; 0x130 <_Z14serialEventRunv+0x22>
     126:	5e d3       	rcall	.+1724   	; 0x7e4 <_Z17Serial0_availablev>
     128:	88 23       	and	r24, r24
     12a:	11 f0       	breq	.+4      	; 0x130 <_Z14serialEventRunv+0x22>
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	01 c0       	rjmp	.+2      	; 0x132 <_Z14serialEventRunv+0x24>
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	88 23       	and	r24, r24
     134:	11 f0       	breq	.+4      	; 0x13a <_Z14serialEventRunv+0x2c>
     136:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     13a:	df 91       	pop	r29
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     13c:	cf 91       	pop	r28
     13e:	08 95       	ret

00000140 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	00 d0       	rcall	.+0      	; 0x146 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x6>
     146:	1f 92       	push	r1
     148:	cd b7       	in	r28, 0x3d	; 61
     14a:	de b7       	in	r29, 0x3e	; 62
     14c:	9b 83       	std	Y+3, r25	; 0x03
     14e:	8a 83       	std	Y+2, r24	; 0x02
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     150:	8a 81       	ldd	r24, Y+2	; 0x02
     152:	9b 81       	ldd	r25, Y+3	; 0x03
     154:	fc 01       	movw	r30, r24
     156:	84 8d       	ldd	r24, Z+28	; 0x1c
     158:	88 2f       	mov	r24, r24
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	2a 81       	ldd	r18, Y+2	; 0x02
     15e:	3b 81       	ldd	r19, Y+3	; 0x03
     160:	82 0f       	add	r24, r18
     162:	93 1f       	adc	r25, r19
     164:	83 5a       	subi	r24, 0xA3	; 163
     166:	9f 4f       	sbci	r25, 0xFF	; 255
     168:	fc 01       	movw	r30, r24
     16a:	80 81       	ld	r24, Z
     16c:	89 83       	std	Y+1, r24	; 0x01
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     16e:	8a 81       	ldd	r24, Y+2	; 0x02
     170:	9b 81       	ldd	r25, Y+3	; 0x03
     172:	fc 01       	movw	r30, r24
     174:	84 8d       	ldd	r24, Z+28	; 0x1c
     176:	88 2f       	mov	r24, r24
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	01 96       	adiw	r24, 0x01	; 1
     17c:	8f 73       	andi	r24, 0x3F	; 63
     17e:	90 78       	andi	r25, 0x80	; 128
     180:	99 23       	and	r25, r25
     182:	24 f4       	brge	.+8      	; 0x18c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x4c>
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	80 6c       	ori	r24, 0xC0	; 192
     188:	9f 6f       	ori	r25, 0xFF	; 255
     18a:	01 96       	adiw	r24, 0x01	; 1
     18c:	28 2f       	mov	r18, r24
     18e:	8a 81       	ldd	r24, Y+2	; 0x02
     190:	9b 81       	ldd	r25, Y+3	; 0x03
     192:	fc 01       	movw	r30, r24
     194:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     196:	8a 81       	ldd	r24, Y+2	; 0x02
     198:	9b 81       	ldd	r25, Y+3	; 0x03
     19a:	fc 01       	movw	r30, r24
     19c:	86 89       	ldd	r24, Z+22	; 0x16
     19e:	97 89       	ldd	r25, Z+23	; 0x17
     1a0:	29 81       	ldd	r18, Y+1	; 0x01
     1a2:	fc 01       	movw	r30, r24
     1a4:	20 83       	st	Z, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     1a6:	8a 81       	ldd	r24, Y+2	; 0x02
     1a8:	9b 81       	ldd	r25, Y+3	; 0x03
     1aa:	fc 01       	movw	r30, r24
     1ac:	80 89       	ldd	r24, Z+16	; 0x10
     1ae:	91 89       	ldd	r25, Z+17	; 0x11
     1b0:	2a 81       	ldd	r18, Y+2	; 0x02
     1b2:	3b 81       	ldd	r19, Y+3	; 0x03
     1b4:	f9 01       	movw	r30, r18
     1b6:	20 89       	ldd	r18, Z+16	; 0x10
     1b8:	31 89       	ldd	r19, Z+17	; 0x11
     1ba:	f9 01       	movw	r30, r18
     1bc:	20 81       	ld	r18, Z
     1be:	20 64       	ori	r18, 0x40	; 64
     1c0:	fc 01       	movw	r30, r24
     1c2:	20 83       	st	Z, r18

  if (_tx_buffer_head == _tx_buffer_tail) {
     1c4:	8a 81       	ldd	r24, Y+2	; 0x02
     1c6:	9b 81       	ldd	r25, Y+3	; 0x03
     1c8:	fc 01       	movw	r30, r24
     1ca:	23 8d       	ldd	r18, Z+27	; 0x1b
     1cc:	8a 81       	ldd	r24, Y+2	; 0x02
     1ce:	9b 81       	ldd	r25, Y+3	; 0x03
     1d0:	fc 01       	movw	r30, r24
     1d2:	94 8d       	ldd	r25, Z+28	; 0x1c
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	29 17       	cp	r18, r25
     1d8:	09 f0       	breq	.+2      	; 0x1dc <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x9c>
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	88 23       	and	r24, r24
     1de:	79 f0       	breq	.+30     	; 0x1fe <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0xbe>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     1e0:	8a 81       	ldd	r24, Y+2	; 0x02
     1e2:	9b 81       	ldd	r25, Y+3	; 0x03
     1e4:	fc 01       	movw	r30, r24
     1e6:	82 89       	ldd	r24, Z+18	; 0x12
     1e8:	93 89       	ldd	r25, Z+19	; 0x13
     1ea:	2a 81       	ldd	r18, Y+2	; 0x02
     1ec:	3b 81       	ldd	r19, Y+3	; 0x03
     1ee:	f9 01       	movw	r30, r18
     1f0:	22 89       	ldd	r18, Z+18	; 0x12
     1f2:	33 89       	ldd	r19, Z+19	; 0x13
     1f4:	f9 01       	movw	r30, r18
     1f6:	20 81       	ld	r18, Z
     1f8:	2f 7d       	andi	r18, 0xDF	; 223
     1fa:	fc 01       	movw	r30, r24
     1fc:	20 83       	st	Z, r18
  }
}
     1fe:	0f 90       	pop	r0
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	08 95       	ret

0000020a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	00 d0       	rcall	.+0      	; 0x210 <_ZN14HardwareSerial9availableEv+0x6>
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
     214:	9a 83       	std	Y+2, r25	; 0x02
     216:	89 83       	std	Y+1, r24	; 0x01
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	9a 81       	ldd	r25, Y+2	; 0x02
     21c:	fc 01       	movw	r30, r24
     21e:	81 8d       	ldd	r24, Z+25	; 0x19
     220:	88 2f       	mov	r24, r24
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	9c 01       	movw	r18, r24
     226:	20 5c       	subi	r18, 0xC0	; 192
     228:	3f 4f       	sbci	r19, 0xFF	; 255
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	9a 81       	ldd	r25, Y+2	; 0x02
     22e:	fc 01       	movw	r30, r24
     230:	82 8d       	ldd	r24, Z+26	; 0x1a
     232:	88 2f       	mov	r24, r24
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	a9 01       	movw	r20, r18
     238:	48 1b       	sub	r20, r24
     23a:	59 0b       	sbc	r21, r25
     23c:	ca 01       	movw	r24, r20
     23e:	8f 73       	andi	r24, 0x3F	; 63
     240:	99 27       	eor	r25, r25
}
     242:	0f 90       	pop	r0
     244:	0f 90       	pop	r0
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	08 95       	ret

0000024c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	00 d0       	rcall	.+0      	; 0x252 <_ZN14HardwareSerial4peekEv+0x6>
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
     256:	9a 83       	std	Y+2, r25	; 0x02
     258:	89 83       	std	Y+1, r24	; 0x01
  if (_rx_buffer_head == _rx_buffer_tail) {
     25a:	89 81       	ldd	r24, Y+1	; 0x01
     25c:	9a 81       	ldd	r25, Y+2	; 0x02
     25e:	fc 01       	movw	r30, r24
     260:	21 8d       	ldd	r18, Z+25	; 0x19
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	9a 81       	ldd	r25, Y+2	; 0x02
     266:	fc 01       	movw	r30, r24
     268:	92 8d       	ldd	r25, Z+26	; 0x1a
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	29 17       	cp	r18, r25
     26e:	09 f0       	breq	.+2      	; 0x272 <_ZN14HardwareSerial4peekEv+0x26>
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	88 23       	and	r24, r24
     274:	19 f0       	breq	.+6      	; 0x27c <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
     276:	8f ef       	ldi	r24, 0xFF	; 255
     278:	9f ef       	ldi	r25, 0xFF	; 255
     27a:	0f c0       	rjmp	.+30     	; 0x29a <_ZN14HardwareSerial4peekEv+0x4e>
  } else {
    return _rx_buffer[_rx_buffer_tail];
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	9a 81       	ldd	r25, Y+2	; 0x02
     280:	fc 01       	movw	r30, r24
     282:	82 8d       	ldd	r24, Z+26	; 0x1a
     284:	88 2f       	mov	r24, r24
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	29 81       	ldd	r18, Y+1	; 0x01
     28a:	3a 81       	ldd	r19, Y+2	; 0x02
     28c:	82 0f       	add	r24, r18
     28e:	93 1f       	adc	r25, r19
     290:	4d 96       	adiw	r24, 0x1d	; 29
     292:	fc 01       	movw	r30, r24
     294:	80 81       	ld	r24, Z
     296:	88 2f       	mov	r24, r24
     298:	90 e0       	ldi	r25, 0x00	; 0
  }
}
     29a:	0f 90       	pop	r0
     29c:	0f 90       	pop	r0
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret

000002a4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	00 d0       	rcall	.+0      	; 0x2aa <_ZN14HardwareSerial4readEv+0x6>
     2aa:	1f 92       	push	r1
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	9b 83       	std	Y+3, r25	; 0x03
     2b2:	8a 83       	std	Y+2, r24	; 0x02
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     2b4:	8a 81       	ldd	r24, Y+2	; 0x02
     2b6:	9b 81       	ldd	r25, Y+3	; 0x03
     2b8:	fc 01       	movw	r30, r24
     2ba:	21 8d       	ldd	r18, Z+25	; 0x19
     2bc:	8a 81       	ldd	r24, Y+2	; 0x02
     2be:	9b 81       	ldd	r25, Y+3	; 0x03
     2c0:	fc 01       	movw	r30, r24
     2c2:	92 8d       	ldd	r25, Z+26	; 0x1a
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	29 17       	cp	r18, r25
     2c8:	09 f0       	breq	.+2      	; 0x2cc <_ZN14HardwareSerial4readEv+0x28>
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	88 23       	and	r24, r24
     2ce:	19 f0       	breq	.+6      	; 0x2d6 <_ZN14HardwareSerial4readEv+0x32>
    return -1;
     2d0:	8f ef       	ldi	r24, 0xFF	; 255
     2d2:	9f ef       	ldi	r25, 0xFF	; 255
     2d4:	1c c0       	rjmp	.+56     	; 0x30e <_ZN14HardwareSerial4readEv+0x6a>
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     2d6:	8a 81       	ldd	r24, Y+2	; 0x02
     2d8:	9b 81       	ldd	r25, Y+3	; 0x03
     2da:	fc 01       	movw	r30, r24
     2dc:	82 8d       	ldd	r24, Z+26	; 0x1a
     2de:	88 2f       	mov	r24, r24
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	2a 81       	ldd	r18, Y+2	; 0x02
     2e4:	3b 81       	ldd	r19, Y+3	; 0x03
     2e6:	82 0f       	add	r24, r18
     2e8:	93 1f       	adc	r25, r19
     2ea:	4d 96       	adiw	r24, 0x1d	; 29
     2ec:	fc 01       	movw	r30, r24
     2ee:	80 81       	ld	r24, Z
     2f0:	89 83       	std	Y+1, r24	; 0x01
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     2f2:	8a 81       	ldd	r24, Y+2	; 0x02
     2f4:	9b 81       	ldd	r25, Y+3	; 0x03
     2f6:	fc 01       	movw	r30, r24
     2f8:	82 8d       	ldd	r24, Z+26	; 0x1a
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	28 2f       	mov	r18, r24
     2fe:	2f 73       	andi	r18, 0x3F	; 63
     300:	8a 81       	ldd	r24, Y+2	; 0x02
     302:	9b 81       	ldd	r25, Y+3	; 0x03
     304:	fc 01       	movw	r30, r24
     306:	22 8f       	std	Z+26, r18	; 0x1a
    return c;
     308:	89 81       	ldd	r24, Y+1	; 0x01
     30a:	88 2f       	mov	r24, r24
     30c:	90 e0       	ldi	r25, 0x00	; 0
  }
}
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	0f 90       	pop	r0
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	00 d0       	rcall	.+0      	; 0x320 <_ZN14HardwareSerial5flushEv+0x6>
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	9a 83       	std	Y+2, r25	; 0x02
     326:	89 83       	std	Y+1, r24	; 0x01
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     328:	89 81       	ldd	r24, Y+1	; 0x01
     32a:	9a 81       	ldd	r25, Y+2	; 0x02
     32c:	fc 01       	movw	r30, r24
     32e:	90 8d       	ldd	r25, Z+24	; 0x18
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	89 27       	eor	r24, r25
     334:	88 23       	and	r24, r24
     336:	09 f0       	breq	.+2      	; 0x33a <_ZN14HardwareSerial5flushEv+0x20>
    return;
     338:	4d c0       	rjmp	.+154    	; 0x3d4 <_ZN14HardwareSerial5flushEv+0xba>

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     33a:	2c c0       	rjmp	.+88     	; 0x394 <_ZN14HardwareSerial5flushEv+0x7a>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     33c:	8f e5       	ldi	r24, 0x5F	; 95
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	fc 01       	movw	r30, r24
     342:	80 81       	ld	r24, Z
     344:	88 23       	and	r24, r24
     346:	7c f0       	brlt	.+30     	; 0x366 <_ZN14HardwareSerial5flushEv+0x4c>
     348:	89 81       	ldd	r24, Y+1	; 0x01
     34a:	9a 81       	ldd	r25, Y+2	; 0x02
     34c:	fc 01       	movw	r30, r24
     34e:	82 89       	ldd	r24, Z+18	; 0x12
     350:	93 89       	ldd	r25, Z+19	; 0x13
     352:	fc 01       	movw	r30, r24
     354:	80 81       	ld	r24, Z
     356:	88 2f       	mov	r24, r24
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	80 72       	andi	r24, 0x20	; 32
     35c:	99 27       	eor	r25, r25
     35e:	00 97       	sbiw	r24, 0x00	; 0
     360:	11 f0       	breq	.+4      	; 0x366 <_ZN14HardwareSerial5flushEv+0x4c>
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	01 c0       	rjmp	.+2      	; 0x368 <_ZN14HardwareSerial5flushEv+0x4e>
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	88 23       	and	r24, r24
     36a:	a1 f0       	breq	.+40     	; 0x394 <_ZN14HardwareSerial5flushEv+0x7a>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	9a 81       	ldd	r25, Y+2	; 0x02
     370:	fc 01       	movw	r30, r24
     372:	80 89       	ldd	r24, Z+16	; 0x10
     374:	91 89       	ldd	r25, Z+17	; 0x11
     376:	fc 01       	movw	r30, r24
     378:	80 81       	ld	r24, Z
     37a:	88 2f       	mov	r24, r24
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	80 72       	andi	r24, 0x20	; 32
     380:	99 27       	eor	r25, r25
     382:	21 e0       	ldi	r18, 0x01	; 1
     384:	00 97       	sbiw	r24, 0x00	; 0
     386:	09 f4       	brne	.+2      	; 0x38a <_ZN14HardwareSerial5flushEv+0x70>
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	22 23       	and	r18, r18
     38c:	19 f0       	breq	.+6      	; 0x394 <_ZN14HardwareSerial5flushEv+0x7a>
	  _tx_udr_empty_irq();
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	9a 81       	ldd	r25, Y+2	; 0x02
     392:	d6 de       	rcall	.-596    	; 0x140 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     394:	89 81       	ldd	r24, Y+1	; 0x01
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     396:	9a 81       	ldd	r25, Y+2	; 0x02
     398:	fc 01       	movw	r30, r24
     39a:	82 89       	ldd	r24, Z+18	; 0x12
     39c:	93 89       	ldd	r25, Z+19	; 0x13
     39e:	fc 01       	movw	r30, r24
     3a0:	80 81       	ld	r24, Z
     3a2:	88 2f       	mov	r24, r24
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	80 72       	andi	r24, 0x20	; 32
     3a8:	99 27       	eor	r25, r25
     3aa:	00 97       	sbiw	r24, 0x00	; 0
     3ac:	69 f4       	brne	.+26     	; 0x3c8 <_ZN14HardwareSerial5flushEv+0xae>
     3ae:	89 81       	ldd	r24, Y+1	; 0x01
     3b0:	9a 81       	ldd	r25, Y+2	; 0x02
     3b2:	fc 01       	movw	r30, r24
     3b4:	80 89       	ldd	r24, Z+16	; 0x10
     3b6:	91 89       	ldd	r25, Z+17	; 0x11
     3b8:	fc 01       	movw	r30, r24
     3ba:	80 81       	ld	r24, Z
     3bc:	88 2f       	mov	r24, r24
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	80 74       	andi	r24, 0x40	; 64
     3c2:	99 27       	eor	r25, r25
     3c4:	00 97       	sbiw	r24, 0x00	; 0
     3c6:	11 f4       	brne	.+4      	; 0x3cc <_ZN14HardwareSerial5flushEv+0xb2>
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	01 c0       	rjmp	.+2      	; 0x3ce <_ZN14HardwareSerial5flushEv+0xb4>
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	88 23       	and	r24, r24
     3d0:	09 f0       	breq	.+2      	; 0x3d4 <_ZN14HardwareSerial5flushEv+0xba>
     3d2:	b4 cf       	rjmp	.-152    	; 0x33c <_ZN14HardwareSerial5flushEv+0x22>
     3d4:	0f 90       	pop	r0
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     3d6:	0f 90       	pop	r0
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	08 95       	ret

000003de <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <_ZN14HardwareSerial5writeEh+0x6>
     3e4:	00 d0       	rcall	.+0      	; 0x3e6 <_ZN14HardwareSerial5writeEh+0x8>
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
     3ea:	9b 83       	std	Y+3, r25	; 0x03
     3ec:	8a 83       	std	Y+2, r24	; 0x02
     3ee:	6c 83       	std	Y+4, r22	; 0x04
  _written = true;
     3f0:	8a 81       	ldd	r24, Y+2	; 0x02
     3f2:	9b 81       	ldd	r25, Y+3	; 0x03
     3f4:	21 e0       	ldi	r18, 0x01	; 1
     3f6:	fc 01       	movw	r30, r24
     3f8:	20 8f       	std	Z+24, r18	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     3fa:	8a 81       	ldd	r24, Y+2	; 0x02
     3fc:	9b 81       	ldd	r25, Y+3	; 0x03
     3fe:	fc 01       	movw	r30, r24
     400:	23 8d       	ldd	r18, Z+27	; 0x1b
     402:	8a 81       	ldd	r24, Y+2	; 0x02
     404:	9b 81       	ldd	r25, Y+3	; 0x03
     406:	fc 01       	movw	r30, r24
     408:	84 8d       	ldd	r24, Z+28	; 0x1c
     40a:	28 17       	cp	r18, r24
     40c:	79 f4       	brne	.+30     	; 0x42c <_ZN14HardwareSerial5writeEh+0x4e>
     40e:	8a 81       	ldd	r24, Y+2	; 0x02
     410:	9b 81       	ldd	r25, Y+3	; 0x03
     412:	fc 01       	movw	r30, r24
     414:	80 89       	ldd	r24, Z+16	; 0x10
     416:	91 89       	ldd	r25, Z+17	; 0x11
     418:	fc 01       	movw	r30, r24
     41a:	80 81       	ld	r24, Z
     41c:	88 2f       	mov	r24, r24
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	80 72       	andi	r24, 0x20	; 32
     422:	99 27       	eor	r25, r25
     424:	00 97       	sbiw	r24, 0x00	; 0
     426:	11 f0       	breq	.+4      	; 0x42c <_ZN14HardwareSerial5writeEh+0x4e>
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	01 c0       	rjmp	.+2      	; 0x42e <_ZN14HardwareSerial5writeEh+0x50>
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	88 23       	and	r24, r24
     430:	d1 f0       	breq	.+52     	; 0x466 <_ZN14HardwareSerial5writeEh+0x88>
    *_udr = c;
     432:	8a 81       	ldd	r24, Y+2	; 0x02
     434:	9b 81       	ldd	r25, Y+3	; 0x03
     436:	fc 01       	movw	r30, r24
     438:	86 89       	ldd	r24, Z+22	; 0x16
     43a:	97 89       	ldd	r25, Z+23	; 0x17
     43c:	2c 81       	ldd	r18, Y+4	; 0x04
     43e:	fc 01       	movw	r30, r24
     440:	20 83       	st	Z, r18
    sbi(*_ucsra, TXC0);
     442:	8a 81       	ldd	r24, Y+2	; 0x02
     444:	9b 81       	ldd	r25, Y+3	; 0x03
     446:	fc 01       	movw	r30, r24
     448:	80 89       	ldd	r24, Z+16	; 0x10
     44a:	91 89       	ldd	r25, Z+17	; 0x11
     44c:	2a 81       	ldd	r18, Y+2	; 0x02
     44e:	3b 81       	ldd	r19, Y+3	; 0x03
     450:	f9 01       	movw	r30, r18
     452:	20 89       	ldd	r18, Z+16	; 0x10
     454:	31 89       	ldd	r19, Z+17	; 0x11
     456:	f9 01       	movw	r30, r18
     458:	20 81       	ld	r18, Z
     45a:	20 64       	ori	r18, 0x40	; 64
     45c:	fc 01       	movw	r30, r24
     45e:	20 83       	st	Z, r18
    return 1;
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	5f c0       	rjmp	.+190    	; 0x524 <_ZN14HardwareSerial5writeEh+0x146>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     466:	8a 81       	ldd	r24, Y+2	; 0x02
     468:	9b 81       	ldd	r25, Y+3	; 0x03
     46a:	fc 01       	movw	r30, r24
     46c:	83 8d       	ldd	r24, Z+27	; 0x1b
     46e:	88 2f       	mov	r24, r24
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	8f 73       	andi	r24, 0x3F	; 63
     476:	90 78       	andi	r25, 0x80	; 128
     478:	99 23       	and	r25, r25
     47a:	24 f4       	brge	.+8      	; 0x484 <_ZN14HardwareSerial5writeEh+0xa6>
     47c:	01 97       	sbiw	r24, 0x01	; 1
     47e:	80 6c       	ori	r24, 0xC0	; 192
     480:	9f 6f       	ori	r25, 0xFF	; 255
     482:	01 96       	adiw	r24, 0x01	; 1
     484:	89 83       	std	Y+1, r24	; 0x01
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     486:	1e c0       	rjmp	.+60     	; 0x4c4 <_ZN14HardwareSerial5writeEh+0xe6>
    if (bit_is_clear(SREG, SREG_I)) {
     488:	8f e5       	ldi	r24, 0x5F	; 95
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	fc 01       	movw	r30, r24
     48e:	80 81       	ld	r24, Z
     490:	80 95       	com	r24
     492:	88 1f       	adc	r24, r24
     494:	88 27       	eor	r24, r24
     496:	88 1f       	adc	r24, r24
     498:	88 23       	and	r24, r24
     49a:	a1 f0       	breq	.+40     	; 0x4c4 <_ZN14HardwareSerial5writeEh+0xe6>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     49c:	8a 81       	ldd	r24, Y+2	; 0x02
     49e:	9b 81       	ldd	r25, Y+3	; 0x03
     4a0:	fc 01       	movw	r30, r24
     4a2:	80 89       	ldd	r24, Z+16	; 0x10
     4a4:	91 89       	ldd	r25, Z+17	; 0x11
     4a6:	fc 01       	movw	r30, r24
     4a8:	80 81       	ld	r24, Z
     4aa:	88 2f       	mov	r24, r24
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	80 72       	andi	r24, 0x20	; 32
     4b0:	99 27       	eor	r25, r25
     4b2:	21 e0       	ldi	r18, 0x01	; 1
     4b4:	00 97       	sbiw	r24, 0x00	; 0
     4b6:	09 f4       	brne	.+2      	; 0x4ba <_ZN14HardwareSerial5writeEh+0xdc>
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	22 23       	and	r18, r18
     4bc:	19 f0       	breq	.+6      	; 0x4c4 <_ZN14HardwareSerial5writeEh+0xe6>
	_tx_udr_empty_irq();
     4be:	8a 81       	ldd	r24, Y+2	; 0x02
     4c0:	9b 81       	ldd	r25, Y+3	; 0x03
     4c2:	3e de       	rcall	.-900    	; 0x140 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     4c4:	8a 81       	ldd	r24, Y+2	; 0x02
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     4c6:	9b 81       	ldd	r25, Y+3	; 0x03
     4c8:	fc 01       	movw	r30, r24
     4ca:	24 8d       	ldd	r18, Z+28	; 0x1c
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	99 81       	ldd	r25, Y+1	; 0x01
     4d0:	29 17       	cp	r18, r25
     4d2:	09 f0       	breq	.+2      	; 0x4d6 <_ZN14HardwareSerial5writeEh+0xf8>
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	88 23       	and	r24, r24
     4d8:	b9 f6       	brne	.-82     	; 0x488 <_ZN14HardwareSerial5writeEh+0xaa>
     4da:	8a 81       	ldd	r24, Y+2	; 0x02
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     4dc:	9b 81       	ldd	r25, Y+3	; 0x03
     4de:	fc 01       	movw	r30, r24
     4e0:	83 8d       	ldd	r24, Z+27	; 0x1b
     4e2:	88 2f       	mov	r24, r24
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	2a 81       	ldd	r18, Y+2	; 0x02
     4e8:	3b 81       	ldd	r19, Y+3	; 0x03
     4ea:	82 0f       	add	r24, r18
     4ec:	93 1f       	adc	r25, r19
     4ee:	83 5a       	subi	r24, 0xA3	; 163
     4f0:	9f 4f       	sbci	r25, 0xFF	; 255
     4f2:	2c 81       	ldd	r18, Y+4	; 0x04
     4f4:	fc 01       	movw	r30, r24
     4f6:	20 83       	st	Z, r18
     4f8:	8a 81       	ldd	r24, Y+2	; 0x02
  _tx_buffer_head = i;
     4fa:	9b 81       	ldd	r25, Y+3	; 0x03
     4fc:	29 81       	ldd	r18, Y+1	; 0x01
     4fe:	fc 01       	movw	r30, r24
     500:	23 8f       	std	Z+27, r18	; 0x1b
     502:	8a 81       	ldd	r24, Y+2	; 0x02
	
  sbi(*_ucsrb, UDRIE0);
     504:	9b 81       	ldd	r25, Y+3	; 0x03
     506:	fc 01       	movw	r30, r24
     508:	82 89       	ldd	r24, Z+18	; 0x12
     50a:	93 89       	ldd	r25, Z+19	; 0x13
     50c:	2a 81       	ldd	r18, Y+2	; 0x02
     50e:	3b 81       	ldd	r19, Y+3	; 0x03
     510:	f9 01       	movw	r30, r18
     512:	22 89       	ldd	r18, Z+18	; 0x12
     514:	33 89       	ldd	r19, Z+19	; 0x13
     516:	f9 01       	movw	r30, r18
     518:	20 81       	ld	r18, Z
     51a:	20 62       	ori	r18, 0x20	; 32
     51c:	fc 01       	movw	r30, r24
     51e:	20 83       	st	Z, r18
     520:	81 e0       	ldi	r24, 0x01	; 1
  
  return 1;
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0f 90       	pop	r0
}
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	08 95       	ret

00000532 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	00 d0       	rcall	.+0      	; 0x538 <_ZN5PrintC1Ev+0x6>
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
     53c:	9a 83       	std	Y+2, r25	; 0x02
     53e:	89 83       	std	Y+1, r24	; 0x01
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	9a 81       	ldd	r25, Y+2	; 0x02
     544:	27 e4       	ldi	r18, 0x47	; 71
     546:	31 e0       	ldi	r19, 0x01	; 1
     548:	fc 01       	movw	r30, r24
     54a:	31 83       	std	Z+1, r19	; 0x01
     54c:	20 83       	st	Z, r18
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	9a 81       	ldd	r25, Y+2	; 0x02
     552:	fc 01       	movw	r30, r24
     554:	13 82       	std	Z+3, r1	; 0x03
     556:	12 82       	std	Z+2, r1	; 0x02
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	08 95       	ret

00000562 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	00 d0       	rcall	.+0      	; 0x568 <_ZN6StreamC1Ev+0x6>
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	9a 83       	std	Y+2, r25	; 0x02
     56e:	89 83       	std	Y+1, r24	; 0x01
     570:	89 81       	ldd	r24, Y+1	; 0x01
     572:	9a 81       	ldd	r25, Y+2	; 0x02
     574:	de df       	rcall	.-68     	; 0x532 <_ZN5PrintC1Ev>
     576:	89 81       	ldd	r24, Y+1	; 0x01
     578:	9a 81       	ldd	r25, Y+2	; 0x02
     57a:	2b e2       	ldi	r18, 0x2B	; 43
     57c:	31 e0       	ldi	r19, 0x01	; 1
     57e:	fc 01       	movw	r30, r24
     580:	31 83       	std	Z+1, r19	; 0x01
     582:	20 83       	st	Z, r18
     584:	29 81       	ldd	r18, Y+1	; 0x01
     586:	3a 81       	ldd	r19, Y+2	; 0x02
     588:	88 ee       	ldi	r24, 0xE8	; 232
     58a:	93 e0       	ldi	r25, 0x03	; 3
     58c:	a0 e0       	ldi	r26, 0x00	; 0
     58e:	b0 e0       	ldi	r27, 0x00	; 0
     590:	f9 01       	movw	r30, r18
     592:	84 83       	std	Z+4, r24	; 0x04
     594:	95 83       	std	Z+5, r25	; 0x05
     596:	a6 83       	std	Z+6, r26	; 0x06
     598:	b7 83       	std	Z+7, r27	; 0x07
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>:
#error "Not all bit positions for UART3 are the same as for UART0"
#endif

// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(
     5a4:	cf 92       	push	r12
     5a6:	df 92       	push	r13
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	2e 97       	sbiw	r28, 0x0e	; 14
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	9a 83       	std	Y+2, r25	; 0x02
     5c6:	89 83       	std	Y+1, r24	; 0x01
     5c8:	7c 83       	std	Y+4, r23	; 0x04
     5ca:	6b 83       	std	Y+3, r22	; 0x03
     5cc:	5e 83       	std	Y+6, r21	; 0x06
     5ce:	4d 83       	std	Y+5, r20	; 0x05
     5d0:	38 87       	std	Y+8, r19	; 0x08
     5d2:	2f 83       	std	Y+7, r18	; 0x07
     5d4:	1a 87       	std	Y+10, r17	; 0x0a
     5d6:	09 87       	std	Y+9, r16	; 0x09
     5d8:	fc 86       	std	Y+12, r15	; 0x0c
     5da:	eb 86       	std	Y+11, r14	; 0x0b
     5dc:	de 86       	std	Y+14, r13	; 0x0e
     5de:	cd 86       	std	Y+13, r12	; 0x0d
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	9a 81       	ldd	r25, Y+2	; 0x02
     5e4:	be df       	rcall	.-132    	; 0x562 <_ZN6StreamC1Ev>
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	9a 81       	ldd	r25, Y+2	; 0x02
     5ea:	2b e1       	ldi	r18, 0x1B	; 27
     5ec:	31 e0       	ldi	r19, 0x01	; 1
     5ee:	fc 01       	movw	r30, r24
     5f0:	31 83       	std	Z+1, r19	; 0x01
     5f2:	20 83       	st	Z, r18
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	9a 81       	ldd	r25, Y+2	; 0x02
     5f8:	2b 81       	ldd	r18, Y+3	; 0x03
     5fa:	3c 81       	ldd	r19, Y+4	; 0x04
     5fc:	fc 01       	movw	r30, r24
     5fe:	35 87       	std	Z+13, r19	; 0x0d
     600:	24 87       	std	Z+12, r18	; 0x0c
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	9a 81       	ldd	r25, Y+2	; 0x02
     606:	2d 81       	ldd	r18, Y+5	; 0x05
     608:	3e 81       	ldd	r19, Y+6	; 0x06
     60a:	fc 01       	movw	r30, r24
     60c:	37 87       	std	Z+15, r19	; 0x0f
     60e:	26 87       	std	Z+14, r18	; 0x0e
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	9a 81       	ldd	r25, Y+2	; 0x02
     614:	2f 81       	ldd	r18, Y+7	; 0x07
     616:	38 85       	ldd	r19, Y+8	; 0x08
     618:	fc 01       	movw	r30, r24
     61a:	31 8b       	std	Z+17, r19	; 0x11
     61c:	20 8b       	std	Z+16, r18	; 0x10
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	9a 81       	ldd	r25, Y+2	; 0x02
     622:	29 85       	ldd	r18, Y+9	; 0x09
     624:	3a 85       	ldd	r19, Y+10	; 0x0a
     626:	fc 01       	movw	r30, r24
     628:	33 8b       	std	Z+19, r19	; 0x13
     62a:	22 8b       	std	Z+18, r18	; 0x12
     62c:	89 81       	ldd	r24, Y+1	; 0x01
     62e:	9a 81       	ldd	r25, Y+2	; 0x02
     630:	2b 85       	ldd	r18, Y+11	; 0x0b
     632:	3c 85       	ldd	r19, Y+12	; 0x0c
     634:	fc 01       	movw	r30, r24
     636:	35 8b       	std	Z+21, r19	; 0x15
     638:	24 8b       	std	Z+20, r18	; 0x14
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	9a 81       	ldd	r25, Y+2	; 0x02
     63e:	2d 85       	ldd	r18, Y+13	; 0x0d
     640:	3e 85       	ldd	r19, Y+14	; 0x0e
     642:	fc 01       	movw	r30, r24
     644:	37 8b       	std	Z+23, r19	; 0x17
     646:	26 8b       	std	Z+22, r18	; 0x16
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	9a 81       	ldd	r25, Y+2	; 0x02
     64c:	fc 01       	movw	r30, r24
     64e:	11 8e       	std	Z+25, r1	; 0x19
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	9a 81       	ldd	r25, Y+2	; 0x02
     654:	fc 01       	movw	r30, r24
     656:	12 8e       	std	Z+26, r1	; 0x1a
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	9a 81       	ldd	r25, Y+2	; 0x02
     65c:	fc 01       	movw	r30, r24
     65e:	13 8e       	std	Z+27, r1	; 0x1b
     660:	89 81       	ldd	r24, Y+1	; 0x01
     662:	9a 81       	ldd	r25, Y+2	; 0x02
     664:	fc 01       	movw	r30, r24
     666:	14 8e       	std	Z+28, r1	; 0x1c
     668:	2e 96       	adiw	r28, 0x0e	; 14
{
}
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	ff 90       	pop	r15
     67e:	ef 90       	pop	r14
     680:	df 90       	pop	r13
     682:	cf 90       	pop	r12
     684:	08 95       	ret

00000686 <_ZN14HardwareSerial16_rx_complete_irqEv>:

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	00 d0       	rcall	.+0      	; 0x68c <_ZN14HardwareSerial16_rx_complete_irqEv+0x6>
     68c:	00 d0       	rcall	.+0      	; 0x68e <_ZN14HardwareSerial16_rx_complete_irqEv+0x8>
     68e:	cd b7       	in	r28, 0x3d	; 61
     690:	de b7       	in	r29, 0x3e	; 62
     692:	9c 83       	std	Y+4, r25	; 0x04
     694:	8b 83       	std	Y+3, r24	; 0x03
  if (bit_is_clear(*_ucsra, UPE0)) {
     696:	8b 81       	ldd	r24, Y+3	; 0x03
     698:	9c 81       	ldd	r25, Y+4	; 0x04
     69a:	fc 01       	movw	r30, r24
     69c:	80 89       	ldd	r24, Z+16	; 0x10
     69e:	91 89       	ldd	r25, Z+17	; 0x11
     6a0:	fc 01       	movw	r30, r24
     6a2:	80 81       	ld	r24, Z
     6a4:	88 2f       	mov	r24, r24
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	84 70       	andi	r24, 0x04	; 4
     6aa:	99 27       	eor	r25, r25
     6ac:	21 e0       	ldi	r18, 0x01	; 1
     6ae:	00 97       	sbiw	r24, 0x00	; 0
     6b0:	09 f0       	breq	.+2      	; 0x6b4 <_ZN14HardwareSerial16_rx_complete_irqEv+0x2e>
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	22 23       	and	r18, r18
     6b6:	71 f1       	breq	.+92     	; 0x714 <_ZN14HardwareSerial16_rx_complete_irqEv+0x8e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     6b8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ba:	9c 81       	ldd	r25, Y+4	; 0x04
     6bc:	fc 01       	movw	r30, r24
     6be:	86 89       	ldd	r24, Z+22	; 0x16
     6c0:	97 89       	ldd	r25, Z+23	; 0x17
     6c2:	fc 01       	movw	r30, r24
     6c4:	80 81       	ld	r24, Z
     6c6:	89 83       	std	Y+1, r24	; 0x01
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     6c8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ca:	9c 81       	ldd	r25, Y+4	; 0x04
     6cc:	fc 01       	movw	r30, r24
     6ce:	81 8d       	ldd	r24, Z+25	; 0x19
     6d0:	8f 5f       	subi	r24, 0xFF	; 255
     6d2:	8f 73       	andi	r24, 0x3F	; 63
     6d4:	8a 83       	std	Y+2, r24	; 0x02

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     6d6:	8b 81       	ldd	r24, Y+3	; 0x03
     6d8:	9c 81       	ldd	r25, Y+4	; 0x04
     6da:	fc 01       	movw	r30, r24
     6dc:	22 8d       	ldd	r18, Z+26	; 0x1a
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	9a 81       	ldd	r25, Y+2	; 0x02
     6e2:	29 17       	cp	r18, r25
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <_ZN14HardwareSerial16_rx_complete_irqEv+0x62>
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	88 23       	and	r24, r24
     6ea:	99 f0       	breq	.+38     	; 0x712 <_ZN14HardwareSerial16_rx_complete_irqEv+0x8c>
      _rx_buffer[_rx_buffer_head] = c;
     6ec:	8b 81       	ldd	r24, Y+3	; 0x03
     6ee:	9c 81       	ldd	r25, Y+4	; 0x04
     6f0:	fc 01       	movw	r30, r24
     6f2:	81 8d       	ldd	r24, Z+25	; 0x19
     6f4:	88 2f       	mov	r24, r24
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	2b 81       	ldd	r18, Y+3	; 0x03
     6fa:	3c 81       	ldd	r19, Y+4	; 0x04
     6fc:	82 0f       	add	r24, r18
     6fe:	93 1f       	adc	r25, r19
     700:	4d 96       	adiw	r24, 0x1d	; 29
     702:	29 81       	ldd	r18, Y+1	; 0x01
     704:	fc 01       	movw	r30, r24
     706:	20 83       	st	Z, r18
      _rx_buffer_head = i;
     708:	8b 81       	ldd	r24, Y+3	; 0x03
     70a:	9c 81       	ldd	r25, Y+4	; 0x04
     70c:	2a 81       	ldd	r18, Y+2	; 0x02
     70e:	fc 01       	movw	r30, r24
     710:	21 8f       	std	Z+25, r18	; 0x19
     712:	07 c0       	rjmp	.+14     	; 0x722 <_ZN14HardwareSerial16_rx_complete_irqEv+0x9c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     714:	8b 81       	ldd	r24, Y+3	; 0x03
     716:	9c 81       	ldd	r25, Y+4	; 0x04
     718:	fc 01       	movw	r30, r24
     71a:	86 89       	ldd	r24, Z+22	; 0x16
     71c:	97 89       	ldd	r25, Z+23	; 0x17
     71e:	fc 01       	movw	r30, r24
     720:	80 81       	ld	r24, Z
  };
}
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     730:	1f 92       	push	r1
     732:	0f 92       	push	r0
     734:	00 90 5f 00 	lds	r0, 0x005F
     738:	0f 92       	push	r0
     73a:	11 24       	eor	r1, r1
     73c:	2f 93       	push	r18
     73e:	3f 93       	push	r19
     740:	4f 93       	push	r20
     742:	5f 93       	push	r21
     744:	6f 93       	push	r22
     746:	7f 93       	push	r23
     748:	8f 93       	push	r24
     74a:	9f 93       	push	r25
     74c:	af 93       	push	r26
     74e:	bf 93       	push	r27
     750:	ef 93       	push	r30
     752:	ff 93       	push	r31
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
    Serial._rx_complete_irq();
     75c:	80 e5       	ldi	r24, 0x50	; 80
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	92 df       	rcall	.-220    	; 0x686 <_ZN14HardwareSerial16_rx_complete_irqEv>
     762:	df 91       	pop	r29
  }
     764:	cf 91       	pop	r28
     766:	ff 91       	pop	r31
     768:	ef 91       	pop	r30
     76a:	bf 91       	pop	r27
     76c:	af 91       	pop	r26
     76e:	9f 91       	pop	r25
     770:	8f 91       	pop	r24
     772:	7f 91       	pop	r23
     774:	6f 91       	pop	r22
     776:	5f 91       	pop	r21
     778:	4f 91       	pop	r20
     77a:	3f 91       	pop	r19
     77c:	2f 91       	pop	r18
     77e:	0f 90       	pop	r0
     780:	00 92 5f 00 	sts	0x005F, r0
     784:	0f 90       	pop	r0
     786:	1f 90       	pop	r1
     788:	18 95       	reti

0000078a <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     78a:	1f 92       	push	r1
     78c:	0f 92       	push	r0
     78e:	00 90 5f 00 	lds	r0, 0x005F
     792:	0f 92       	push	r0
     794:	11 24       	eor	r1, r1
     796:	2f 93       	push	r18
     798:	3f 93       	push	r19
     79a:	4f 93       	push	r20
     79c:	5f 93       	push	r21
     79e:	6f 93       	push	r22
     7a0:	7f 93       	push	r23
     7a2:	8f 93       	push	r24
     7a4:	9f 93       	push	r25
     7a6:	af 93       	push	r26
     7a8:	bf 93       	push	r27
     7aa:	ef 93       	push	r30
     7ac:	ff 93       	push	r31
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
  Serial._tx_udr_empty_irq();
     7b6:	80 e5       	ldi	r24, 0x50	; 80
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	c2 dc       	rcall	.-1660   	; 0x140 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     7bc:	df 91       	pop	r29
}
     7be:	cf 91       	pop	r28
     7c0:	ff 91       	pop	r31
     7c2:	ef 91       	pop	r30
     7c4:	bf 91       	pop	r27
     7c6:	af 91       	pop	r26
     7c8:	9f 91       	pop	r25
     7ca:	8f 91       	pop	r24
     7cc:	7f 91       	pop	r23
     7ce:	6f 91       	pop	r22
     7d0:	5f 91       	pop	r21
     7d2:	4f 91       	pop	r20
     7d4:	3f 91       	pop	r19
     7d6:	2f 91       	pop	r18
     7d8:	0f 90       	pop	r0
     7da:	00 92 5f 00 	sts	0x005F, r0
     7de:	0f 90       	pop	r0
     7e0:	1f 90       	pop	r1
     7e2:	18 95       	reti

000007e4 <_Z17Serial0_availablev>:
  HardwareSerial Serial(&UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0);
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
  return Serial.available();
     7ec:	80 e5       	ldi	r24, 0x50	; 80
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	0c dd       	rcall	.-1512   	; 0x20a <_ZN14HardwareSerial9availableEv>
     7f2:	21 e0       	ldi	r18, 0x01	; 1
     7f4:	00 97       	sbiw	r24, 0x00	; 0
     7f6:	09 f4       	brne	.+2      	; 0x7fa <_Z17Serial0_availablev+0x16>
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	82 2f       	mov	r24, r18
     7fc:	df 91       	pop	r29
}
     7fe:	cf 91       	pop	r28
     800:	08 95       	ret

00000802 <_Z41__static_initialization_and_destruction_0ii>:
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	00 d0       	rcall	.+0      	; 0x814 <_Z41__static_initialization_and_destruction_0ii+0x12>
     814:	00 d0       	rcall	.+0      	; 0x816 <_Z41__static_initialization_and_destruction_0ii+0x14>
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
     81a:	9a 83       	std	Y+2, r25	; 0x02
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	7c 83       	std	Y+4, r23	; 0x04
     820:	6b 83       	std	Y+3, r22	; 0x03
     822:	89 81       	ldd	r24, Y+1	; 0x01
     824:	9a 81       	ldd	r25, Y+2	; 0x02
     826:	81 30       	cpi	r24, 0x01	; 1
     828:	91 05       	cpc	r25, r1
     82a:	d9 f4       	brne	.+54     	; 0x862 <_Z41__static_initialization_and_destruction_0ii+0x60>
     82c:	8b 81       	ldd	r24, Y+3	; 0x03
     82e:	9c 81       	ldd	r25, Y+4	; 0x04
     830:	8f 3f       	cpi	r24, 0xFF	; 255
     832:	2f ef       	ldi	r18, 0xFF	; 255
     834:	92 07       	cpc	r25, r18
     836:	a9 f4       	brne	.+42     	; 0x862 <_Z41__static_initialization_and_destruction_0ii+0x60>
}

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR);
#else
  HardwareSerial Serial(&UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0);
     838:	0f 2e       	mov	r0, r31
     83a:	f6 ec       	ldi	r31, 0xC6	; 198
     83c:	cf 2e       	mov	r12, r31
     83e:	d1 2c       	mov	r13, r1
     840:	f0 2d       	mov	r31, r0
     842:	0f 2e       	mov	r0, r31
     844:	f2 ec       	ldi	r31, 0xC2	; 194
     846:	ef 2e       	mov	r14, r31
     848:	f1 2c       	mov	r15, r1
     84a:	f0 2d       	mov	r31, r0
     84c:	01 ec       	ldi	r16, 0xC1	; 193
     84e:	10 e0       	ldi	r17, 0x00	; 0
     850:	20 ec       	ldi	r18, 0xC0	; 192
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	44 ec       	ldi	r20, 0xC4	; 196
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	65 ec       	ldi	r22, 0xC5	; 197
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	80 e5       	ldi	r24, 0x50	; 80
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	a1 de       	rcall	.-702    	; 0x5a4 <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>
     862:	0f 90       	pop	r0

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	df 90       	pop	r13
     878:	cf 90       	pop	r12
     87a:	08 95       	ret

0000087c <_GLOBAL__sub_I___vector_18>:
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
     884:	6f ef       	ldi	r22, 0xFF	; 255
     886:	7f ef       	ldi	r23, 0xFF	; 255
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	ba df       	rcall	.-140    	; 0x802 <_Z41__static_initialization_and_destruction_0ii>
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <_ZN9PrintableC1Ev>:
    By deriving from Printable and implementing the printTo method, it will then be possible
    for users to print out instances of this class by passing them into the usual
    Print::print and Print::println methods.
*/

class Printable
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	00 d0       	rcall	.+0      	; 0x89a <_ZN9PrintableC1Ev+0x6>
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
     89e:	9a 83       	std	Y+2, r25	; 0x02
     8a0:	89 83       	std	Y+1, r24	; 0x01
     8a2:	89 81       	ldd	r24, Y+1	; 0x01
     8a4:	9a 81       	ldd	r25, Y+2	; 0x02
     8a6:	21 e4       	ldi	r18, 0x41	; 65
     8a8:	31 e0       	ldi	r19, 0x01	; 1
     8aa:	fc 01       	movw	r30, r24
     8ac:	31 83       	std	Z+1, r19	; 0x01
     8ae:	20 83       	st	Z, r18
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	08 95       	ret

000008ba <_ZN9IPAddressC1Ehhhh>:
#include <stdlib.h>

class Print;

/** The Printable class provides a way for new classes to allow themselves to be printed.
    By deriving from Printable and implementing the printTo method, it will then be possible
     8ba:	0f 93       	push	r16
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <_ZN9IPAddressC1Ehhhh+0x8>
     8c2:	00 d0       	rcall	.+0      	; 0x8c4 <_ZN9IPAddressC1Ehhhh+0xa>
     8c4:	00 d0       	rcall	.+0      	; 0x8c6 <_ZN9IPAddressC1Ehhhh+0xc>
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	9a 83       	std	Y+2, r25	; 0x02
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	6b 83       	std	Y+3, r22	; 0x03
     8d0:	4c 83       	std	Y+4, r20	; 0x04
     8d2:	2d 83       	std	Y+5, r18	; 0x05
     8d4:	0e 83       	std	Y+6, r16	; 0x06
     8d6:	89 81       	ldd	r24, Y+1	; 0x01
     8d8:	9a 81       	ldd	r25, Y+2	; 0x02
     8da:	dc df       	rcall	.-72     	; 0x894 <_ZN9PrintableC1Ev>
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	9a 81       	ldd	r25, Y+2	; 0x02
     8e0:	2b e3       	ldi	r18, 0x3B	; 59
     8e2:	31 e0       	ldi	r19, 0x01	; 1
     8e4:	fc 01       	movw	r30, r24
     8e6:	31 83       	std	Z+1, r19	; 0x01
     8e8:	20 83       	st	Z, r18
     8ea:	89 81       	ldd	r24, Y+1	; 0x01
    for users to print out instances of this class by passing them into the usual
    Print::print and Print::println methods.
     8ec:	9a 81       	ldd	r25, Y+2	; 0x02
     8ee:	2b 81       	ldd	r18, Y+3	; 0x03
     8f0:	fc 01       	movw	r30, r24
     8f2:	22 83       	std	Z+2, r18	; 0x02
     8f4:	89 81       	ldd	r24, Y+1	; 0x01
*/
     8f6:	9a 81       	ldd	r25, Y+2	; 0x02
     8f8:	2c 81       	ldd	r18, Y+4	; 0x04
     8fa:	fc 01       	movw	r30, r24
     8fc:	23 83       	std	Z+3, r18	; 0x03
     8fe:	89 81       	ldd	r24, Y+1	; 0x01

     900:	9a 81       	ldd	r25, Y+2	; 0x02
     902:	2d 81       	ldd	r18, Y+5	; 0x05
     904:	fc 01       	movw	r30, r24
     906:	24 83       	std	Z+4, r18	; 0x04
     908:	89 81       	ldd	r24, Y+1	; 0x01
class Printable
     90a:	9a 81       	ldd	r25, Y+2	; 0x02
     90c:	2e 81       	ldd	r18, Y+6	; 0x06
     90e:	fc 01       	movw	r30, r24
     910:	25 83       	std	Z+5, r18	; 0x05
     912:	26 96       	adiw	r28, 0x06	; 6
{
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	de bf       	out	0x3e, r29	; 62
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	cd bf       	out	0x3d, r28	; 61
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	0f 91       	pop	r16
     924:	08 95       	ret

00000926 <_ZNK9IPAddress7printToER5Print>:
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	28 97       	sbiw	r28, 0x08	; 8
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	de bf       	out	0x3e, r29	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	cd bf       	out	0x3d, r28	; 61
     93a:	9e 83       	std	Y+6, r25	; 0x06
     93c:	8d 83       	std	Y+5, r24	; 0x05
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	6f 83       	std	Y+7, r22	; 0x07
     942:	1a 82       	std	Y+2, r1	; 0x02
     944:	19 82       	std	Y+1, r1	; 0x01
     946:	1c 82       	std	Y+4, r1	; 0x04
     948:	1b 82       	std	Y+3, r1	; 0x03
     94a:	24 c0       	rjmp	.+72     	; 0x994 <_ZNK9IPAddress7printToER5Print+0x6e>
     94c:	2d 81       	ldd	r18, Y+5	; 0x05
     94e:	3e 81       	ldd	r19, Y+6	; 0x06
     950:	8b 81       	ldd	r24, Y+3	; 0x03
     952:	9c 81       	ldd	r25, Y+4	; 0x04
     954:	82 0f       	add	r24, r18
     956:	93 1f       	adc	r25, r19
     958:	02 96       	adiw	r24, 0x02	; 2
     95a:	fc 01       	movw	r30, r24
     95c:	20 81       	ld	r18, Z
     95e:	8f 81       	ldd	r24, Y+7	; 0x07
     960:	98 85       	ldd	r25, Y+8	; 0x08
     962:	4a e0       	ldi	r20, 0x0A	; 10
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	62 2f       	mov	r22, r18
     968:	01 d1       	rcall	.+514    	; 0xb6c <_ZN5Print5printEhi>
     96a:	29 81       	ldd	r18, Y+1	; 0x01
     96c:	3a 81       	ldd	r19, Y+2	; 0x02
     96e:	82 0f       	add	r24, r18
     970:	93 1f       	adc	r25, r19
     972:	9a 83       	std	Y+2, r25	; 0x02
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8f 81       	ldd	r24, Y+7	; 0x07
     978:	98 85       	ldd	r25, Y+8	; 0x08
     97a:	6e e2       	ldi	r22, 0x2E	; 46
     97c:	db d0       	rcall	.+438    	; 0xb34 <_ZN5Print5printEc>
     97e:	29 81       	ldd	r18, Y+1	; 0x01
     980:	3a 81       	ldd	r19, Y+2	; 0x02
     982:	82 0f       	add	r24, r18
     984:	93 1f       	adc	r25, r19
     986:	9a 83       	std	Y+2, r25	; 0x02
     988:	89 83       	std	Y+1, r24	; 0x01
     98a:	8b 81       	ldd	r24, Y+3	; 0x03
     98c:	9c 81       	ldd	r25, Y+4	; 0x04
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	9c 83       	std	Y+4, r25	; 0x04
     992:	8b 83       	std	Y+3, r24	; 0x03
     994:	8b 81       	ldd	r24, Y+3	; 0x03
     996:	9c 81       	ldd	r25, Y+4	; 0x04
     998:	83 30       	cpi	r24, 0x03	; 3
     99a:	91 05       	cpc	r25, r1
     99c:	bc f2       	brlt	.-82     	; 0x94c <_ZNK9IPAddress7printToER5Print+0x26>
     99e:	8d 81       	ldd	r24, Y+5	; 0x05
     9a0:	9e 81       	ldd	r25, Y+6	; 0x06
     9a2:	fc 01       	movw	r30, r24
     9a4:	25 81       	ldd	r18, Z+5	; 0x05
     9a6:	8f 81       	ldd	r24, Y+7	; 0x07
     9a8:	98 85       	ldd	r25, Y+8	; 0x08
     9aa:	4a e0       	ldi	r20, 0x0A	; 10
     9ac:	50 e0       	ldi	r21, 0x00	; 0
     9ae:	62 2f       	mov	r22, r18
     9b0:	dd d0       	rcall	.+442    	; 0xb6c <_ZN5Print5printEhi>
     9b2:	29 81       	ldd	r18, Y+1	; 0x01
     9b4:	3a 81       	ldd	r19, Y+2	; 0x02
     9b6:	82 0f       	add	r24, r18
     9b8:	93 1f       	adc	r25, r19
     9ba:	9a 83       	std	Y+2, r25	; 0x02
     9bc:	89 83       	std	Y+1, r24	; 0x01
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	9a 81       	ldd	r25, Y+2	; 0x02
     9c2:	28 96       	adiw	r28, 0x08	; 8
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	f8 94       	cli
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	cd bf       	out	0x3d, r28	; 61
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	08 95       	ret

000009d4 <_Z41__static_initialization_and_destruction_0ii>:
     9d4:	0f 93       	push	r16
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	00 d0       	rcall	.+0      	; 0x9dc <_Z41__static_initialization_and_destruction_0ii+0x8>
     9dc:	00 d0       	rcall	.+0      	; 0x9de <_Z41__static_initialization_and_destruction_0ii+0xa>
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
     9e2:	9a 83       	std	Y+2, r25	; 0x02
     9e4:	89 83       	std	Y+1, r24	; 0x01
     9e6:	7c 83       	std	Y+4, r23	; 0x04
     9e8:	6b 83       	std	Y+3, r22	; 0x03
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	9a 81       	ldd	r25, Y+2	; 0x02
     9ee:	81 30       	cpi	r24, 0x01	; 1
     9f0:	91 05       	cpc	r25, r1
     9f2:	69 f4       	brne	.+26     	; 0xa0e <_Z41__static_initialization_and_destruction_0ii+0x3a>
     9f4:	8b 81       	ldd	r24, Y+3	; 0x03
     9f6:	9c 81       	ldd	r25, Y+4	; 0x04
     9f8:	8f 3f       	cpi	r24, 0xFF	; 255
     9fa:	2f ef       	ldi	r18, 0xFF	; 255
     9fc:	92 07       	cpc	r25, r18
     9fe:	39 f4       	brne	.+14     	; 0xa0e <_Z41__static_initialization_and_destruction_0ii+0x3a>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
     a00:	00 e0       	ldi	r16, 0x00	; 0
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	8d ee       	ldi	r24, 0xED	; 237
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	56 df       	rcall	.-340    	; 0x8ba <_ZN9IPAddressC1Ehhhh>
     a0e:	0f 90       	pop	r0
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	0f 91       	pop	r16
     a1c:	08 95       	ret

00000a1e <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
     a26:	6f ef       	ldi	r22, 0xFF	; 255
     a28:	7f ef       	ldi	r23, 0xFF	; 255
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	d2 df       	rcall	.-92     	; 0x9d4 <_Z41__static_initialization_and_destruction_0ii>
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	00 d0       	rcall	.+0      	; 0xa40 <_ZN5Print5writeEPKc+0xa>
     a40:	00 d0       	rcall	.+0      	; 0xa42 <_ZN5Print5writeEPKc+0xc>
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
     a46:	9a 83       	std	Y+2, r25	; 0x02
     a48:	89 83       	std	Y+1, r24	; 0x01
     a4a:	7c 83       	std	Y+4, r23	; 0x04
     a4c:	6b 83       	std	Y+3, r22	; 0x03
      if (str == NULL) return 0;
     a4e:	8b 81       	ldd	r24, Y+3	; 0x03
     a50:	9c 81       	ldd	r25, Y+4	; 0x04
     a52:	00 97       	sbiw	r24, 0x00	; 0
     a54:	19 f4       	brne	.+6      	; 0xa5c <_ZN5Print5writeEPKc+0x26>
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	15 c0       	rjmp	.+42     	; 0xa86 <_ZN5Print5writeEPKc+0x50>
      return write((const uint8_t *)str, strlen(str));
     a5c:	89 81       	ldd	r24, Y+1	; 0x01
     a5e:	9a 81       	ldd	r25, Y+2	; 0x02
     a60:	fc 01       	movw	r30, r24
     a62:	80 81       	ld	r24, Z
     a64:	91 81       	ldd	r25, Z+1	; 0x01
     a66:	02 96       	adiw	r24, 0x02	; 2
     a68:	fc 01       	movw	r30, r24
     a6a:	00 81       	ld	r16, Z
     a6c:	11 81       	ldd	r17, Z+1	; 0x01
     a6e:	8b 81       	ldd	r24, Y+3	; 0x03
     a70:	9c 81       	ldd	r25, Y+4	; 0x04
     a72:	0e 94 34 11 	call	0x2268	; 0x2268 <strlen>
     a76:	ac 01       	movw	r20, r24
     a78:	2b 81       	ldd	r18, Y+3	; 0x03
     a7a:	3c 81       	ldd	r19, Y+4	; 0x04
     a7c:	89 81       	ldd	r24, Y+1	; 0x01
     a7e:	9a 81       	ldd	r25, Y+2	; 0x02
     a80:	b9 01       	movw	r22, r18
     a82:	f8 01       	movw	r30, r16
     a84:	09 95       	icall
    }
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	08 95       	ret

00000a98 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	28 97       	sbiw	r28, 0x08	; 8
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	9c 83       	std	Y+4, r25	; 0x04
     aae:	8b 83       	std	Y+3, r24	; 0x03
     ab0:	7e 83       	std	Y+6, r23	; 0x06
     ab2:	6d 83       	std	Y+5, r22	; 0x05
     ab4:	58 87       	std	Y+8, r21	; 0x08
     ab6:	4f 83       	std	Y+7, r20	; 0x07
  size_t n = 0;
     ab8:	1a 82       	std	Y+2, r1	; 0x02
     aba:	19 82       	std	Y+1, r1	; 0x01
  while (size--) {
     abc:	23 c0       	rjmp	.+70     	; 0xb04 <_ZN5Print5writeEPKhj+0x6c>
    if (write(*buffer++)) n++;
     abe:	8b 81       	ldd	r24, Y+3	; 0x03
     ac0:	9c 81       	ldd	r25, Y+4	; 0x04
     ac2:	fc 01       	movw	r30, r24
     ac4:	80 81       	ld	r24, Z
     ac6:	91 81       	ldd	r25, Z+1	; 0x01
     ac8:	fc 01       	movw	r30, r24
     aca:	20 81       	ld	r18, Z
     acc:	31 81       	ldd	r19, Z+1	; 0x01
     ace:	8d 81       	ldd	r24, Y+5	; 0x05
     ad0:	9e 81       	ldd	r25, Y+6	; 0x06
     ad2:	ac 01       	movw	r20, r24
     ad4:	4f 5f       	subi	r20, 0xFF	; 255
     ad6:	5f 4f       	sbci	r21, 0xFF	; 255
     ad8:	5e 83       	std	Y+6, r21	; 0x06
     ada:	4d 83       	std	Y+5, r20	; 0x05
     adc:	fc 01       	movw	r30, r24
     ade:	40 81       	ld	r20, Z
     ae0:	8b 81       	ldd	r24, Y+3	; 0x03
     ae2:	9c 81       	ldd	r25, Y+4	; 0x04
     ae4:	64 2f       	mov	r22, r20
     ae6:	f9 01       	movw	r30, r18
     ae8:	09 95       	icall
     aea:	21 e0       	ldi	r18, 0x01	; 1
     aec:	00 97       	sbiw	r24, 0x00	; 0
     aee:	09 f4       	brne	.+2      	; 0xaf2 <_ZN5Print5writeEPKhj+0x5a>
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	22 23       	and	r18, r18
     af4:	31 f0       	breq	.+12     	; 0xb02 <_ZN5Print5writeEPKhj+0x6a>
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	9a 83       	std	Y+2, r25	; 0x02
     afe:	89 83       	std	Y+1, r24	; 0x01
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <_ZN5Print5writeEPKhj+0x6c>
    else break;
     b02:	0d c0       	rjmp	.+26     	; 0xb1e <_ZN5Print5writeEPKhj+0x86>

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     b04:	8f 81       	ldd	r24, Y+7	; 0x07
     b06:	98 85       	ldd	r25, Y+8	; 0x08
     b08:	9c 01       	movw	r18, r24
     b0a:	21 50       	subi	r18, 0x01	; 1
     b0c:	31 09       	sbc	r19, r1
     b0e:	38 87       	std	Y+8, r19	; 0x08
     b10:	2f 83       	std	Y+7, r18	; 0x07
     b12:	21 e0       	ldi	r18, 0x01	; 1
     b14:	00 97       	sbiw	r24, 0x00	; 0
     b16:	09 f4       	brne	.+2      	; 0xb1a <_ZN5Print5writeEPKhj+0x82>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	22 23       	and	r18, r18
     b1c:	81 f6       	brne	.-96     	; 0xabe <_ZN5Print5writeEPKhj+0x26>
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
     b1e:	89 81       	ldd	r24, Y+1	; 0x01
     b20:	9a 81       	ldd	r25, Y+2	; 0x02
}
     b22:	28 96       	adiw	r28, 0x08	; 8
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	de bf       	out	0x3e, r29	; 62
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	cd bf       	out	0x3d, r28	; 61
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <_ZN5Print5printEc>:
{
  return write(str);
}

size_t Print::print(char c)
{
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	00 d0       	rcall	.+0      	; 0xb3a <_ZN5Print5printEc+0x6>
     b3a:	1f 92       	push	r1
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	9a 83       	std	Y+2, r25	; 0x02
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	6b 83       	std	Y+3, r22	; 0x03
  return write(c);
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	9a 81       	ldd	r25, Y+2	; 0x02
     b4a:	fc 01       	movw	r30, r24
     b4c:	80 81       	ld	r24, Z
     b4e:	91 81       	ldd	r25, Z+1	; 0x01
     b50:	fc 01       	movw	r30, r24
     b52:	20 81       	ld	r18, Z
     b54:	31 81       	ldd	r19, Z+1	; 0x01
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	9a 81       	ldd	r25, Y+2	; 0x02
     b5a:	6b 81       	ldd	r22, Y+3	; 0x03
     b5c:	f9 01       	movw	r30, r18
     b5e:	09 95       	icall
}
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	08 95       	ret

00000b6c <_ZN5Print5printEhi>:

size_t Print::print(unsigned char b, int base)
{
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	00 d0       	rcall	.+0      	; 0xb72 <_ZN5Print5printEhi+0x6>
     b72:	00 d0       	rcall	.+0      	; 0xb74 <_ZN5Print5printEhi+0x8>
     b74:	1f 92       	push	r1
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	9a 83       	std	Y+2, r25	; 0x02
     b7c:	89 83       	std	Y+1, r24	; 0x01
     b7e:	6b 83       	std	Y+3, r22	; 0x03
     b80:	5d 83       	std	Y+5, r21	; 0x05
     b82:	4c 83       	std	Y+4, r20	; 0x04
  return print((unsigned long) b, base);
     b84:	8b 81       	ldd	r24, Y+3	; 0x03
     b86:	88 2f       	mov	r24, r24
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	2c 81       	ldd	r18, Y+4	; 0x04
     b90:	3d 81       	ldd	r19, Y+5	; 0x05
     b92:	e9 81       	ldd	r30, Y+1	; 0x01
     b94:	fa 81       	ldd	r31, Y+2	; 0x02
     b96:	ac 01       	movw	r20, r24
     b98:	bd 01       	movw	r22, r26
     b9a:	cf 01       	movw	r24, r30
     b9c:	08 d0       	rcall	.+16     	; 0xbae <_ZN5Print5printEmi>
     b9e:	0f 90       	pop	r0
}
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	08 95       	ret

00000bae <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	28 97       	sbiw	r28, 0x08	; 8
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
     bc2:	9a 83       	std	Y+2, r25	; 0x02
     bc4:	89 83       	std	Y+1, r24	; 0x01
     bc6:	4b 83       	std	Y+3, r20	; 0x03
     bc8:	5c 83       	std	Y+4, r21	; 0x04
     bca:	6d 83       	std	Y+5, r22	; 0x05
     bcc:	7e 83       	std	Y+6, r23	; 0x06
     bce:	38 87       	std	Y+8, r19	; 0x08
     bd0:	2f 83       	std	Y+7, r18	; 0x07
  if (base == 0) return write(n);
     bd2:	8f 81       	ldd	r24, Y+7	; 0x07
     bd4:	98 85       	ldd	r25, Y+8	; 0x08
     bd6:	00 97       	sbiw	r24, 0x00	; 0
     bd8:	79 f4       	brne	.+30     	; 0xbf8 <_ZN5Print5printEmi+0x4a>
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	9a 81       	ldd	r25, Y+2	; 0x02
     bde:	fc 01       	movw	r30, r24
     be0:	80 81       	ld	r24, Z
     be2:	91 81       	ldd	r25, Z+1	; 0x01
     be4:	fc 01       	movw	r30, r24
     be6:	20 81       	ld	r18, Z
     be8:	31 81       	ldd	r19, Z+1	; 0x01
     bea:	4b 81       	ldd	r20, Y+3	; 0x03
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	9a 81       	ldd	r25, Y+2	; 0x02
     bf0:	64 2f       	mov	r22, r20
     bf2:	f9 01       	movw	r30, r18
     bf4:	09 95       	icall
     bf6:	0b c0       	rjmp	.+22     	; 0xc0e <_ZN5Print5printEmi+0x60>
  else return printNumber(n, base);
     bf8:	2f 81       	ldd	r18, Y+7	; 0x07
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	ad 81       	ldd	r26, Y+5	; 0x05
     c00:	be 81       	ldd	r27, Y+6	; 0x06
     c02:	e9 81       	ldd	r30, Y+1	; 0x01
     c04:	fa 81       	ldd	r31, Y+2	; 0x02
     c06:	ac 01       	movw	r20, r24
     c08:	bd 01       	movw	r22, r26
     c0a:	cf 01       	movw	r24, r30
     c0c:	09 d0       	rcall	.+18     	; 0xc20 <_ZN5Print11printNumberEmh>
     c0e:	28 96       	adiw	r28, 0x08	; 8
}
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	f8 94       	cli
     c14:	de bf       	out	0x3e, r29	; 62
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	cd bf       	out	0x3d, r28	; 61
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	08 95       	ret

00000c20 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	e3 97       	sbiw	r28, 0x33	; 51
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	cd bf       	out	0x3d, r28	; 61
     c34:	9a a7       	std	Y+42, r25	; 0x2a
     c36:	89 a7       	std	Y+41, r24	; 0x29
     c38:	4b a7       	std	Y+43, r20	; 0x2b
     c3a:	5c a7       	std	Y+44, r21	; 0x2c
     c3c:	6d a7       	std	Y+45, r22	; 0x2d
     c3e:	7e a7       	std	Y+46, r23	; 0x2e
     c40:	2f a7       	std	Y+47, r18	; 0x2f
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
     c42:	80 e2       	ldi	r24, 0x20	; 32
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	9e 01       	movw	r18, r28
     c48:	28 5f       	subi	r18, 0xF8	; 248
     c4a:	3f 4f       	sbci	r19, 0xFF	; 255
     c4c:	82 0f       	add	r24, r18
     c4e:	93 1f       	adc	r25, r19
     c50:	9a 83       	std	Y+2, r25	; 0x02
     c52:	89 83       	std	Y+1, r24	; 0x01

  *str = '\0';
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	9a 81       	ldd	r25, Y+2	; 0x02
     c58:	fc 01       	movw	r30, r24
     c5a:	10 82       	st	Z, r1

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     c5c:	8f a5       	ldd	r24, Y+47	; 0x2f
     c5e:	82 30       	cpi	r24, 0x02	; 2
     c60:	10 f4       	brcc	.+4      	; 0xc66 <_ZN5Print11printNumberEmh+0x46>
     c62:	8a e0       	ldi	r24, 0x0A	; 10
     c64:	8f a7       	std	Y+47, r24	; 0x2f

  do {
    unsigned long m = n;
     c66:	8b a5       	ldd	r24, Y+43	; 0x2b
     c68:	9c a5       	ldd	r25, Y+44	; 0x2c
     c6a:	ad a5       	ldd	r26, Y+45	; 0x2d
     c6c:	be a5       	ldd	r27, Y+46	; 0x2e
     c6e:	8b 83       	std	Y+3, r24	; 0x03
     c70:	9c 83       	std	Y+4, r25	; 0x04
     c72:	ad 83       	std	Y+5, r26	; 0x05
     c74:	be 83       	std	Y+6, r27	; 0x06
    n /= base;
     c76:	8f a5       	ldd	r24, Y+47	; 0x2f
     c78:	28 2f       	mov	r18, r24
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	8b a5       	ldd	r24, Y+43	; 0x2b
     c82:	9c a5       	ldd	r25, Y+44	; 0x2c
     c84:	ad a5       	ldd	r26, Y+45	; 0x2d
     c86:	be a5       	ldd	r27, Y+46	; 0x2e
     c88:	bc 01       	movw	r22, r24
     c8a:	cd 01       	movw	r24, r26
     c8c:	0e 94 08 11 	call	0x2210	; 0x2210 <__udivmodsi4>
     c90:	da 01       	movw	r26, r20
     c92:	c9 01       	movw	r24, r18
     c94:	8b a7       	std	Y+43, r24	; 0x2b
     c96:	9c a7       	std	Y+44, r25	; 0x2c
     c98:	ad a7       	std	Y+45, r26	; 0x2d
     c9a:	be a7       	std	Y+46, r27	; 0x2e
    char c = m - base * n;
     c9c:	9b 81       	ldd	r25, Y+3	; 0x03
     c9e:	2b a5       	ldd	r18, Y+43	; 0x2b
     ca0:	8f a5       	ldd	r24, Y+47	; 0x2f
     ca2:	28 9f       	mul	r18, r24
     ca4:	80 2d       	mov	r24, r0
     ca6:	11 24       	eor	r1, r1
     ca8:	f9 2f       	mov	r31, r25
     caa:	f8 1b       	sub	r31, r24
     cac:	8f 2f       	mov	r24, r31
     cae:	8f 83       	std	Y+7, r24	; 0x07
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	9a 81       	ldd	r25, Y+2	; 0x02
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	9a 83       	std	Y+2, r25	; 0x02
     cb8:	89 83       	std	Y+1, r24	; 0x01
     cba:	8f 81       	ldd	r24, Y+7	; 0x07
     cbc:	8a 30       	cpi	r24, 0x0A	; 10
     cbe:	20 f4       	brcc	.+8      	; 0xcc8 <_ZN5Print11printNumberEmh+0xa8>
     cc0:	8f 81       	ldd	r24, Y+7	; 0x07
     cc2:	20 e3       	ldi	r18, 0x30	; 48
     cc4:	28 0f       	add	r18, r24
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <_ZN5Print11printNumberEmh+0xae>
     cc8:	8f 81       	ldd	r24, Y+7	; 0x07
     cca:	27 e3       	ldi	r18, 0x37	; 55
     ccc:	28 0f       	add	r18, r24
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	9a 81       	ldd	r25, Y+2	; 0x02
     cd2:	fc 01       	movw	r30, r24
     cd4:	20 83       	st	Z, r18
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     cd6:	8b a5       	ldd	r24, Y+43	; 0x2b
     cd8:	9c a5       	ldd	r25, Y+44	; 0x2c
     cda:	ad a5       	ldd	r26, Y+45	; 0x2d
     cdc:	be a5       	ldd	r27, Y+46	; 0x2e
     cde:	00 97       	sbiw	r24, 0x00	; 0
     ce0:	a1 05       	cpc	r26, r1
     ce2:	b1 05       	cpc	r27, r1
     ce4:	09 f0       	breq	.+2      	; 0xce8 <_ZN5Print11printNumberEmh+0xc8>
     ce6:	bf cf       	rjmp	.-130    	; 0xc66 <_ZN5Print11printNumberEmh+0x46>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     ce8:	29 81       	ldd	r18, Y+1	; 0x01
     cea:	3a 81       	ldd	r19, Y+2	; 0x02
     cec:	89 a5       	ldd	r24, Y+41	; 0x29
     cee:	9a a5       	ldd	r25, Y+42	; 0x2a
     cf0:	b9 01       	movw	r22, r18
     cf2:	a1 de       	rcall	.-702    	; 0xa36 <_ZN5Print5writeEPKc>
     cf4:	e3 96       	adiw	r28, 0x33	; 51
}
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	cd bf       	out	0x3d, r28	; 61
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	08 95       	ret

00000d06 <_Z12disableTimerh>:

// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	1f 92       	push	r1
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	89 83       	std	Y+1, r24	; 0x01
  switch (_timer)
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	88 2f       	mov	r24, r24
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	91 05       	cpc	r25, r1
     d1c:	51 f0       	breq	.+20     	; 0xd32 <_Z12disableTimerh+0x2c>
     d1e:	82 30       	cpi	r24, 0x02	; 2
     d20:	91 05       	cpc	r25, r1
     d22:	89 f0       	breq	.+34     	; 0xd46 <_Z12disableTimerh+0x40>
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	61 f5       	brne	.+88     	; 0xd80 <_Z12disableTimerh+0x7a>
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     d28:	8e e6       	ldi	r24, 0x6E	; 110
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	fc 01       	movw	r30, r24
     d2e:	10 82       	st	Z, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     d30:	27 c0       	rjmp	.+78     	; 0xd80 <_Z12disableTimerh+0x7a>

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     d32:	8f e6       	ldi	r24, 0x6F	; 111
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	2f e6       	ldi	r18, 0x6F	; 111
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	f9 01       	movw	r30, r18
     d3c:	20 81       	ld	r18, Z
     d3e:	2d 7f       	andi	r18, 0xFD	; 253
     d40:	fc 01       	movw	r30, r24
     d42:	20 83       	st	Z, r18
      break;
     d44:	1d c0       	rjmp	.+58     	; 0xd80 <_Z12disableTimerh+0x7a>
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     d46:	80 e7       	ldi	r24, 0x70	; 112
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	20 e7       	ldi	r18, 0x70	; 112
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	f9 01       	movw	r30, r18
     d50:	20 81       	ld	r18, Z
     d52:	2d 7f       	andi	r18, 0xFD	; 253
     d54:	fc 01       	movw	r30, r24
     d56:	20 83       	st	Z, r18
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     d58:	80 eb       	ldi	r24, 0xB0	; 176
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	21 e0       	ldi	r18, 0x01	; 1
     d5e:	fc 01       	movw	r30, r24
     d60:	20 83       	st	Z, r18
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     d62:	81 eb       	ldi	r24, 0xB1	; 177
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	21 eb       	ldi	r18, 0xB1	; 177
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	f9 01       	movw	r30, r18
     d6c:	20 81       	ld	r18, Z
     d6e:	28 7f       	andi	r18, 0xF8	; 248
     d70:	24 60       	ori	r18, 0x04	; 4
     d72:	fc 01       	movw	r30, r24
     d74:	20 83       	st	Z, r18
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     d76:	83 eb       	ldi	r24, 0xB3	; 179
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	fc 01       	movw	r30, r24
     d7c:	10 82       	st	Z, r1
      #endif
      break;
     d7e:	00 00       	nop
    case 5:
      bitWrite(TIMSK5, OCIE5A, 0);
      break;
#endif
  }
}
     d80:	0f 90       	pop	r0
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	08 95       	ret

00000d88 <_Z6noToneh>:


void noTone(uint8_t _pin)
{
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	27 97       	sbiw	r28, 0x07	; 7
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	f8 94       	cli
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	cd bf       	out	0x3d, r28	; 61
     d9c:	8f 83       	std	Y+7, r24	; 0x07
  int8_t _timer = -1;
     d9e:	8f ef       	ldi	r24, 0xFF	; 255
     da0:	89 83       	std	Y+1, r24	; 0x01
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
     da2:	1b 82       	std	Y+3, r1	; 0x03
     da4:	1a 82       	std	Y+2, r1	; 0x02
     da6:	23 c0       	rjmp	.+70     	; 0xdee <_Z6noToneh+0x66>
    if (tone_pins[i] == _pin) {
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	9b 81       	ldd	r25, Y+3	; 0x03
     dac:	86 5f       	subi	r24, 0xF6	; 246
     dae:	9e 4f       	sbci	r25, 0xFE	; 254
     db0:	fc 01       	movw	r30, r24
     db2:	90 81       	ld	r25, Z
     db4:	8f 81       	ldd	r24, Y+7	; 0x07
     db6:	98 17       	cp	r25, r24
     db8:	a9 f4       	brne	.+42     	; 0xde4 <_Z6noToneh+0x5c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	9b 81       	ldd	r25, Y+3	; 0x03
     dbe:	88 59       	subi	r24, 0x98	; 152
     dc0:	9f 4f       	sbci	r25, 0xFF	; 255
     dc2:	9d 83       	std	Y+5, r25	; 0x05
     dc4:	8c 83       	std	Y+4, r24	; 0x04
     dc6:	8c 81       	ldd	r24, Y+4	; 0x04
     dc8:	9d 81       	ldd	r25, Y+5	; 0x05
     dca:	fc 01       	movw	r30, r24
     dcc:	84 91       	lpm	r24, Z
     dce:	8e 83       	std	Y+6, r24	; 0x06
     dd0:	8e 81       	ldd	r24, Y+6	; 0x06
     dd2:	89 83       	std	Y+1, r24	; 0x01
      tone_pins[i] = 255;
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	9b 81       	ldd	r25, Y+3	; 0x03
     dd8:	86 5f       	subi	r24, 0xF6	; 246
     dda:	9e 4f       	sbci	r25, 0xFE	; 254
     ddc:	2f ef       	ldi	r18, 0xFF	; 255
     dde:	fc 01       	movw	r30, r24
     de0:	20 83       	st	Z, r18
      break;
     de2:	0a c0       	rjmp	.+20     	; 0xdf8 <_Z6noToneh+0x70>

void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	9b 81       	ldd	r25, Y+3	; 0x03
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	9b 83       	std	Y+3, r25	; 0x03
     dec:	8a 83       	std	Y+2, r24	; 0x02
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	9b 81       	ldd	r25, Y+3	; 0x03
     df2:	18 16       	cp	r1, r24
     df4:	19 06       	cpc	r1, r25
     df6:	c4 f6       	brge	.-80     	; 0xda8 <_Z6noToneh+0x20>
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	85 df       	rcall	.-246    	; 0xd06 <_Z12disableTimerh>
     dfc:	60 e0       	ldi	r22, 0x00	; 0

  digitalWrite(_pin, 0);
     dfe:	8f 81       	ldd	r24, Y+7	; 0x07
     e00:	cd d3       	rcall	.+1946   	; 0x159c <digitalWrite>
     e02:	27 96       	adiw	r28, 0x07	; 7
     e04:	0f b6       	in	r0, 0x3f	; 63
}
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     e14:	1f 92       	push	r1
     e16:	0f 92       	push	r0
     e18:	00 90 5f 00 	lds	r0, 0x005F
     e1c:	0f 92       	push	r0
     e1e:	11 24       	eor	r1, r1
     e20:	2f 93       	push	r18
     e22:	3f 93       	push	r19
     e24:	4f 93       	push	r20
     e26:	5f 93       	push	r21
     e28:	6f 93       	push	r22
     e2a:	7f 93       	push	r23
     e2c:	8f 93       	push	r24
     e2e:	9f 93       	push	r25
     e30:	af 93       	push	r26
     e32:	bf 93       	push	r27
     e34:	ef 93       	push	r30
     e36:	ff 93       	push	r31
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62

  if (timer2_toggle_count != 0)
     e40:	80 91 f3 01 	lds	r24, 0x01F3
     e44:	90 91 f4 01 	lds	r25, 0x01F4
     e48:	a0 91 f5 01 	lds	r26, 0x01F5
     e4c:	b0 91 f6 01 	lds	r27, 0x01F6
     e50:	21 e0       	ldi	r18, 0x01	; 1
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	a1 05       	cpc	r26, r1
     e56:	b1 05       	cpc	r27, r1
     e58:	09 f4       	brne	.+2      	; 0xe5c <__vector_7+0x48>
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	22 23       	and	r18, r18
     e5e:	a1 f1       	breq	.+104    	; 0xec8 <__vector_7+0xb4>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     e60:	40 91 f9 01 	lds	r20, 0x01F9
     e64:	80 91 f7 01 	lds	r24, 0x01F7
     e68:	90 91 f8 01 	lds	r25, 0x01F8
     e6c:	20 91 f7 01 	lds	r18, 0x01F7
     e70:	30 91 f8 01 	lds	r19, 0x01F8
     e74:	f9 01       	movw	r30, r18
     e76:	20 81       	ld	r18, Z
     e78:	24 27       	eor	r18, r20
     e7a:	fc 01       	movw	r30, r24
     e7c:	20 83       	st	Z, r18

    if (timer2_toggle_count > 0)
     e7e:	80 91 f3 01 	lds	r24, 0x01F3
     e82:	90 91 f4 01 	lds	r25, 0x01F4
     e86:	a0 91 f5 01 	lds	r26, 0x01F5
     e8a:	b0 91 f6 01 	lds	r27, 0x01F6
     e8e:	21 e0       	ldi	r18, 0x01	; 1
     e90:	18 16       	cp	r1, r24
     e92:	19 06       	cpc	r1, r25
     e94:	1a 06       	cpc	r1, r26
     e96:	1b 06       	cpc	r1, r27
     e98:	0c f0       	brlt	.+2      	; 0xe9c <__vector_7+0x88>
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	22 23       	and	r18, r18
     e9e:	b9 f0       	breq	.+46     	; 0xece <__vector_7+0xba>
      timer2_toggle_count--;
     ea0:	80 91 f3 01 	lds	r24, 0x01F3
     ea4:	90 91 f4 01 	lds	r25, 0x01F4
     ea8:	a0 91 f5 01 	lds	r26, 0x01F5
     eac:	b0 91 f6 01 	lds	r27, 0x01F6
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	a1 09       	sbc	r26, r1
     eb4:	b1 09       	sbc	r27, r1
     eb6:	80 93 f3 01 	sts	0x01F3, r24
     eba:	90 93 f4 01 	sts	0x01F4, r25
     ebe:	a0 93 f5 01 	sts	0x01F5, r26
     ec2:	b0 93 f6 01 	sts	0x01F6, r27
     ec6:	03 c0       	rjmp	.+6      	; 0xece <__vector_7+0xba>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     ec8:	80 91 0a 01 	lds	r24, 0x010A
     ecc:	5d df       	rcall	.-326    	; 0xd88 <_Z6noToneh>
     ece:	df 91       	pop	r29
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     ed0:	cf 91       	pop	r28
     ed2:	ff 91       	pop	r31
     ed4:	ef 91       	pop	r30
     ed6:	bf 91       	pop	r27
     ed8:	af 91       	pop	r26
     eda:	9f 91       	pop	r25
     edc:	8f 91       	pop	r24
     ede:	7f 91       	pop	r23
     ee0:	6f 91       	pop	r22
     ee2:	5f 91       	pop	r21
     ee4:	4f 91       	pop	r20
     ee6:	3f 91       	pop	r19
     ee8:	2f 91       	pop	r18
     eea:	0f 90       	pop	r0
     eec:	00 92 5f 00 	sts	0x005F, r0
     ef0:	0f 90       	pop	r0
     ef2:	1f 90       	pop	r1
     ef4:	18 95       	reti

00000ef6 <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
}
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	08 95       	ret

00000f04 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
     f04:	1f 92       	push	r1
     f06:	0f 92       	push	r0
     f08:	00 90 5f 00 	lds	r0, 0x005F
     f0c:	0f 92       	push	r0
     f0e:	11 24       	eor	r1, r1
     f10:	2f 93       	push	r18
     f12:	3f 93       	push	r19
     f14:	4f 93       	push	r20
     f16:	5f 93       	push	r21
     f18:	6f 93       	push	r22
     f1a:	7f 93       	push	r23
     f1c:	8f 93       	push	r24
     f1e:	9f 93       	push	r25
     f20:	af 93       	push	r26
     f22:	bf 93       	push	r27
     f24:	ef 93       	push	r30
     f26:	ff 93       	push	r31
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
    intFunc[EXTERNAL_INT_0]();
     f30:	80 91 0b 01 	lds	r24, 0x010B
     f34:	90 91 0c 01 	lds	r25, 0x010C
     f38:	fc 01       	movw	r30, r24
     f3a:	09 95       	icall
}
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	ff 91       	pop	r31
     f42:	ef 91       	pop	r30
     f44:	bf 91       	pop	r27
     f46:	af 91       	pop	r26
     f48:	9f 91       	pop	r25
     f4a:	8f 91       	pop	r24
     f4c:	7f 91       	pop	r23
     f4e:	6f 91       	pop	r22
     f50:	5f 91       	pop	r21
     f52:	4f 91       	pop	r20
     f54:	3f 91       	pop	r19
     f56:	2f 91       	pop	r18
     f58:	0f 90       	pop	r0
     f5a:	00 92 5f 00 	sts	0x005F, r0
     f5e:	0f 90       	pop	r0
     f60:	1f 90       	pop	r1
     f62:	18 95       	reti

00000f64 <__vector_2>:

ISR(INT1_vect) {
     f64:	1f 92       	push	r1
     f66:	0f 92       	push	r0
     f68:	00 90 5f 00 	lds	r0, 0x005F
     f6c:	0f 92       	push	r0
     f6e:	11 24       	eor	r1, r1
     f70:	2f 93       	push	r18
     f72:	3f 93       	push	r19
     f74:	4f 93       	push	r20
     f76:	5f 93       	push	r21
     f78:	6f 93       	push	r22
     f7a:	7f 93       	push	r23
     f7c:	8f 93       	push	r24
     f7e:	9f 93       	push	r25
     f80:	af 93       	push	r26
     f82:	bf 93       	push	r27
     f84:	ef 93       	push	r30
     f86:	ff 93       	push	r31
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
    intFunc[EXTERNAL_INT_1]();
     f90:	80 91 0d 01 	lds	r24, 0x010D
     f94:	90 91 0e 01 	lds	r25, 0x010E
     f98:	fc 01       	movw	r30, r24
     f9a:	09 95       	icall
}
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	ff 91       	pop	r31
     fa2:	ef 91       	pop	r30
     fa4:	bf 91       	pop	r27
     fa6:	af 91       	pop	r26
     fa8:	9f 91       	pop	r25
     faa:	8f 91       	pop	r24
     fac:	7f 91       	pop	r23
     fae:	6f 91       	pop	r22
     fb0:	5f 91       	pop	r21
     fb2:	4f 91       	pop	r20
     fb4:	3f 91       	pop	r19
     fb6:	2f 91       	pop	r18
     fb8:	0f 90       	pop	r0
     fba:	00 92 5f 00 	sts	0x005F, r0
     fbe:	0f 90       	pop	r0
     fc0:	1f 90       	pop	r1
     fc2:	18 95       	reti

00000fc4 <__cxa_pure_virtual>:
#include <stdlib.h>

extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
     fcc:	0e 94 30 11 	call	0x2260	; 0x2260 <abort>

00000fd0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
	// Empty
}
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	08 95       	ret

00000fde <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <main>:

void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
	init();
     ff4:	1c d1       	rcall	.+568    	; 0x122e <init>
     ff6:	f3 df       	rcall	.-26     	; 0xfde <initVariant>

	initVariant();
     ff8:	6f d3       	rcall	.+1758   	; 0x16d8 <setup>
     ffa:	78 d3       	rcall	.+1776   	; 0x16ec <loop>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     ffc:	87 e8       	ldi	r24, 0x87	; 135
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    
	for (;;) {
		loop();
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	09 f0       	breq	.+2      	; 0x1006 <main+0x1a>
		if (serialEventRun) serialEventRun();
    1004:	84 d8       	rcall	.-3832   	; 0x10e <_Z14serialEventRunv>
    1006:	f9 cf       	rjmp	.-14     	; 0xffa <main+0xe>

00001008 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1008:	1f 92       	push	r1
    100a:	0f 92       	push	r0
    100c:	00 90 5f 00 	lds	r0, 0x005F
    1010:	0f 92       	push	r0
    1012:	11 24       	eor	r1, r1
    1014:	8f 93       	push	r24
    1016:	9f 93       	push	r25
    1018:	af 93       	push	r26
    101a:	bf 93       	push	r27
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	25 97       	sbiw	r28, 0x05	; 5
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	cd bf       	out	0x3d, r28	; 61
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    102a:	80 91 fe 01 	lds	r24, 0x01FE
    102e:	90 91 ff 01 	lds	r25, 0x01FF
    1032:	a0 91 00 02 	lds	r26, 0x0200
    1036:	b0 91 01 02 	lds	r27, 0x0201
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	9a 83       	std	Y+2, r25	; 0x02
    103e:	ab 83       	std	Y+3, r26	; 0x03
    1040:	bc 83       	std	Y+4, r27	; 0x04
	unsigned char f = timer0_fract;
    1042:	80 91 02 02 	lds	r24, 0x0202
    1046:	8d 83       	std	Y+5, r24	; 0x05

	m += MILLIS_INC;
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	9a 81       	ldd	r25, Y+2	; 0x02
    104c:	ab 81       	ldd	r26, Y+3	; 0x03
    104e:	bc 81       	ldd	r27, Y+4	; 0x04
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	a1 1d       	adc	r26, r1
    1054:	b1 1d       	adc	r27, r1
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	9a 83       	std	Y+2, r25	; 0x02
    105a:	ab 83       	std	Y+3, r26	; 0x03
    105c:	bc 83       	std	Y+4, r27	; 0x04
	f += FRACT_INC;
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	8d 5f       	subi	r24, 0xFD	; 253
    1062:	8d 83       	std	Y+5, r24	; 0x05
	if (f >= FRACT_MAX) {
    1064:	8d 81       	ldd	r24, Y+5	; 0x05
    1066:	8d 37       	cpi	r24, 0x7D	; 125
    1068:	70 f0       	brcs	.+28     	; 0x1086 <__vector_16+0x7e>
		f -= FRACT_MAX;
    106a:	8d 81       	ldd	r24, Y+5	; 0x05
    106c:	8d 57       	subi	r24, 0x7D	; 125
    106e:	8d 83       	std	Y+5, r24	; 0x05
		m += 1;
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	9a 81       	ldd	r25, Y+2	; 0x02
    1074:	ab 81       	ldd	r26, Y+3	; 0x03
    1076:	bc 81       	ldd	r27, Y+4	; 0x04
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	a1 1d       	adc	r26, r1
    107c:	b1 1d       	adc	r27, r1
    107e:	89 83       	std	Y+1, r24	; 0x01
    1080:	9a 83       	std	Y+2, r25	; 0x02
    1082:	ab 83       	std	Y+3, r26	; 0x03
    1084:	bc 83       	std	Y+4, r27	; 0x04
	}

	timer0_fract = f;
    1086:	8d 81       	ldd	r24, Y+5	; 0x05
    1088:	80 93 02 02 	sts	0x0202, r24
	timer0_millis = m;
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	ab 81       	ldd	r26, Y+3	; 0x03
    1092:	bc 81       	ldd	r27, Y+4	; 0x04
    1094:	80 93 fe 01 	sts	0x01FE, r24
    1098:	90 93 ff 01 	sts	0x01FF, r25
    109c:	a0 93 00 02 	sts	0x0200, r26
    10a0:	b0 93 01 02 	sts	0x0201, r27
	timer0_overflow_count++;
    10a4:	80 91 fa 01 	lds	r24, 0x01FA
    10a8:	90 91 fb 01 	lds	r25, 0x01FB
    10ac:	a0 91 fc 01 	lds	r26, 0x01FC
    10b0:	b0 91 fd 01 	lds	r27, 0x01FD
    10b4:	01 96       	adiw	r24, 0x01	; 1
    10b6:	a1 1d       	adc	r26, r1
    10b8:	b1 1d       	adc	r27, r1
    10ba:	80 93 fa 01 	sts	0x01FA, r24
    10be:	90 93 fb 01 	sts	0x01FB, r25
    10c2:	a0 93 fc 01 	sts	0x01FC, r26
    10c6:	b0 93 fd 01 	sts	0x01FD, r27
}
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	bf 91       	pop	r27
    10da:	af 91       	pop	r26
    10dc:	9f 91       	pop	r25
    10de:	8f 91       	pop	r24
    10e0:	0f 90       	pop	r0
    10e2:	00 92 5f 00 	sts	0x005F, r0
    10e6:	0f 90       	pop	r0
    10e8:	1f 90       	pop	r1
    10ea:	18 95       	reti

000010ec <micros>:
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	00 d0       	rcall	.+0      	; 0x10f2 <micros+0x6>
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <micros+0x8>
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <micros+0xa>
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    10fa:	8f e5       	ldi	r24, 0x5F	; 95
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	fc 01       	movw	r30, r24
    1100:	80 81       	ld	r24, Z
    1102:	8d 83       	std	Y+5, r24	; 0x05
	
	cli();
    1104:	f8 94       	cli
	m = timer0_overflow_count;
    1106:	80 91 fa 01 	lds	r24, 0x01FA
    110a:	90 91 fb 01 	lds	r25, 0x01FB
    110e:	a0 91 fc 01 	lds	r26, 0x01FC
    1112:	b0 91 fd 01 	lds	r27, 0x01FD
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	9a 83       	std	Y+2, r25	; 0x02
    111a:	ab 83       	std	Y+3, r26	; 0x03
    111c:	bc 83       	std	Y+4, r27	; 0x04
#if defined(TCNT0)
	t = TCNT0;
    111e:	86 e4       	ldi	r24, 0x46	; 70
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	fc 01       	movw	r30, r24
    1124:	80 81       	ld	r24, Z
    1126:	8e 83       	std	Y+6, r24	; 0x06
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1128:	85 e3       	ldi	r24, 0x35	; 53
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	fc 01       	movw	r30, r24
    112e:	80 81       	ld	r24, Z
    1130:	88 2f       	mov	r24, r24
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	81 70       	andi	r24, 0x01	; 1
    1136:	99 27       	eor	r25, r25
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	71 f0       	breq	.+28     	; 0x1158 <micros+0x6c>
    113c:	8e 81       	ldd	r24, Y+6	; 0x06
    113e:	8f 3f       	cpi	r24, 0xFF	; 255
    1140:	59 f0       	breq	.+22     	; 0x1158 <micros+0x6c>
		m++;
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	9a 81       	ldd	r25, Y+2	; 0x02
    1146:	ab 81       	ldd	r26, Y+3	; 0x03
    1148:	bc 81       	ldd	r27, Y+4	; 0x04
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	a1 1d       	adc	r26, r1
    114e:	b1 1d       	adc	r27, r1
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	9a 83       	std	Y+2, r25	; 0x02
    1154:	ab 83       	std	Y+3, r26	; 0x03
    1156:	bc 83       	std	Y+4, r27	; 0x04
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1158:	8f e5       	ldi	r24, 0x5F	; 95
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	2d 81       	ldd	r18, Y+5	; 0x05
    115e:	fc 01       	movw	r30, r24
    1160:	20 83       	st	Z, r18
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	9a 81       	ldd	r25, Y+2	; 0x02
    1166:	ab 81       	ldd	r26, Y+3	; 0x03
    1168:	bc 81       	ldd	r27, Y+4	; 0x04
    116a:	22 27       	eor	r18, r18
    116c:	38 2f       	mov	r19, r24
    116e:	49 2f       	mov	r20, r25
    1170:	5a 2f       	mov	r21, r26
    1172:	8e 81       	ldd	r24, Y+6	; 0x06
    1174:	88 2f       	mov	r24, r24
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	a0 e0       	ldi	r26, 0x00	; 0
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	82 0f       	add	r24, r18
    117e:	93 1f       	adc	r25, r19
    1180:	a4 1f       	adc	r26, r20
    1182:	b5 1f       	adc	r27, r21
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	aa 1f       	adc	r26, r26
    118a:	bb 1f       	adc	r27, r27
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	aa 1f       	adc	r26, r26
    1192:	bb 1f       	adc	r27, r27
}
    1194:	bc 01       	movw	r22, r24
    1196:	cd 01       	movw	r24, r26
    1198:	26 96       	adiw	r28, 0x06	; 6
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	08 95       	ret

000011aa <delay>:

void delay(unsigned long ms)
{
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <delay+0x6>
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <delay+0x8>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <delay+0xa>
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	6b 83       	std	Y+3, r22	; 0x03
    11ba:	7c 83       	std	Y+4, r23	; 0x04
    11bc:	8d 83       	std	Y+5, r24	; 0x05
    11be:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t start = (uint16_t)micros();
    11c0:	95 df       	rcall	.-214    	; 0x10ec <micros>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	9a 83       	std	Y+2, r25	; 0x02
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	20 c0       	rjmp	.+64     	; 0x120c <delay+0x62>

	while (ms > 0) {
    11cc:	01 df       	rcall	.-510    	; 0xfd0 <yield>
		yield();
    11ce:	8e df       	rcall	.-228    	; 0x10ec <micros>
    11d0:	dc 01       	movw	r26, r24
		if (((uint16_t)micros() - start) >= 1000) {
    11d2:	cb 01       	movw	r24, r22
    11d4:	9c 01       	movw	r18, r24
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	9a 81       	ldd	r25, Y+2	; 0x02
    11da:	a9 01       	movw	r20, r18
    11dc:	48 1b       	sub	r20, r24
    11de:	59 0b       	sbc	r21, r25
    11e0:	ca 01       	movw	r24, r20
    11e2:	88 3e       	cpi	r24, 0xE8	; 232
    11e4:	53 e0       	ldi	r21, 0x03	; 3
    11e6:	95 07       	cpc	r25, r21
    11e8:	88 f0       	brcs	.+34     	; 0x120c <delay+0x62>
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	9c 81       	ldd	r25, Y+4	; 0x04
    11ee:	ad 81       	ldd	r26, Y+5	; 0x05
			ms--;
    11f0:	be 81       	ldd	r27, Y+6	; 0x06
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	a1 09       	sbc	r26, r1
    11f6:	b1 09       	sbc	r27, r1
    11f8:	8b 83       	std	Y+3, r24	; 0x03
    11fa:	9c 83       	std	Y+4, r25	; 0x04
    11fc:	ad 83       	std	Y+5, r26	; 0x05
    11fe:	be 83       	std	Y+6, r27	; 0x06
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	9a 81       	ldd	r25, Y+2	; 0x02
    1204:	88 51       	subi	r24, 0x18	; 24
			start += 1000;
    1206:	9c 4f       	sbci	r25, 0xFC	; 252
    1208:	9a 83       	std	Y+2, r25	; 0x02
    120a:	89 83       	std	Y+1, r24	; 0x01
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	9c 81       	ldd	r25, Y+4	; 0x04
    1210:	ad 81       	ldd	r26, Y+5	; 0x05

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    1212:	be 81       	ldd	r27, Y+6	; 0x06
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	a1 05       	cpc	r26, r1
    1218:	b1 05       	cpc	r27, r1
    121a:	c1 f6       	brne	.-80     	; 0x11cc <delay+0x22>
    121c:	26 96       	adiw	r28, 0x06	; 6
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	08 95       	ret

0000122e <init>:
	);
	// return = 4 cycles
}

void init()
{
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1236:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1238:	84 e4       	ldi	r24, 0x44	; 68
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	24 e4       	ldi	r18, 0x44	; 68
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	f9 01       	movw	r30, r18
    1242:	20 81       	ld	r18, Z
    1244:	22 60       	ori	r18, 0x02	; 2
    1246:	fc 01       	movw	r30, r24
    1248:	20 83       	st	Z, r18
	sbi(TCCR0A, WGM00);
    124a:	84 e4       	ldi	r24, 0x44	; 68
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	24 e4       	ldi	r18, 0x44	; 68
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	f9 01       	movw	r30, r18
    1254:	20 81       	ld	r18, Z
    1256:	21 60       	ori	r18, 0x01	; 1
    1258:	fc 01       	movw	r30, r24
    125a:	20 83       	st	Z, r18
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    125c:	85 e4       	ldi	r24, 0x45	; 69
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	25 e4       	ldi	r18, 0x45	; 69
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	f9 01       	movw	r30, r18
    1266:	20 81       	ld	r18, Z
    1268:	22 60       	ori	r18, 0x02	; 2
    126a:	fc 01       	movw	r30, r24
    126c:	20 83       	st	Z, r18
	sbi(TCCR0B, CS00);
    126e:	85 e4       	ldi	r24, 0x45	; 69
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	25 e4       	ldi	r18, 0x45	; 69
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	f9 01       	movw	r30, r18
    1278:	20 81       	ld	r18, Z
    127a:	21 60       	ori	r18, 0x01	; 1
    127c:	fc 01       	movw	r30, r24
    127e:	20 83       	st	Z, r18

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1280:	8e e6       	ldi	r24, 0x6E	; 110
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	2e e6       	ldi	r18, 0x6E	; 110
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	f9 01       	movw	r30, r18
    128a:	20 81       	ld	r18, Z
    128c:	21 60       	ori	r18, 0x01	; 1
    128e:	fc 01       	movw	r30, r24
    1290:	20 83       	st	Z, r18
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1292:	81 e8       	ldi	r24, 0x81	; 129
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	fc 01       	movw	r30, r24
    1298:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    129a:	81 e8       	ldi	r24, 0x81	; 129
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	21 e8       	ldi	r18, 0x81	; 129
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	f9 01       	movw	r30, r18
    12a4:	20 81       	ld	r18, Z
    12a6:	22 60       	ori	r18, 0x02	; 2
    12a8:	fc 01       	movw	r30, r24
    12aa:	20 83       	st	Z, r18
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    12ac:	81 e8       	ldi	r24, 0x81	; 129
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	21 e8       	ldi	r18, 0x81	; 129
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	f9 01       	movw	r30, r18
    12b6:	20 81       	ld	r18, Z
    12b8:	21 60       	ori	r18, 0x01	; 1
    12ba:	fc 01       	movw	r30, r24
    12bc:	20 83       	st	Z, r18
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    12be:	80 e8       	ldi	r24, 0x80	; 128
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	20 e8       	ldi	r18, 0x80	; 128
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	f9 01       	movw	r30, r18
    12c8:	20 81       	ld	r18, Z
    12ca:	21 60       	ori	r18, 0x01	; 1
    12cc:	fc 01       	movw	r30, r24
    12ce:	20 83       	st	Z, r18

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    12d0:	81 eb       	ldi	r24, 0xB1	; 177
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	21 eb       	ldi	r18, 0xB1	; 177
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	f9 01       	movw	r30, r18
    12da:	20 81       	ld	r18, Z
    12dc:	24 60       	ori	r18, 0x04	; 4
    12de:	fc 01       	movw	r30, r24
    12e0:	20 83       	st	Z, r18

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    12e2:	80 eb       	ldi	r24, 0xB0	; 176
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	20 eb       	ldi	r18, 0xB0	; 176
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	f9 01       	movw	r30, r18
    12ec:	20 81       	ld	r18, Z
    12ee:	21 60       	ori	r18, 0x01	; 1
    12f0:	fc 01       	movw	r30, r24
    12f2:	20 83       	st	Z, r18
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    12f4:	8a e7       	ldi	r24, 0x7A	; 122
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	2a e7       	ldi	r18, 0x7A	; 122
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	f9 01       	movw	r30, r18
    12fe:	20 81       	ld	r18, Z
    1300:	24 60       	ori	r18, 0x04	; 4
    1302:	fc 01       	movw	r30, r24
    1304:	20 83       	st	Z, r18
		sbi(ADCSRA, ADPS1);
    1306:	8a e7       	ldi	r24, 0x7A	; 122
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	2a e7       	ldi	r18, 0x7A	; 122
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	f9 01       	movw	r30, r18
    1310:	20 81       	ld	r18, Z
    1312:	22 60       	ori	r18, 0x02	; 2
    1314:	fc 01       	movw	r30, r24
    1316:	20 83       	st	Z, r18
		sbi(ADCSRA, ADPS0);
    1318:	8a e7       	ldi	r24, 0x7A	; 122
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	2a e7       	ldi	r18, 0x7A	; 122
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	f9 01       	movw	r30, r18
    1322:	20 81       	ld	r18, Z
    1324:	21 60       	ori	r18, 0x01	; 1
    1326:	fc 01       	movw	r30, r24
    1328:	20 83       	st	Z, r18
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    132a:	8a e7       	ldi	r24, 0x7A	; 122
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	2a e7       	ldi	r18, 0x7A	; 122
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	f9 01       	movw	r30, r18
    1334:	20 81       	ld	r18, Z
    1336:	20 68       	ori	r18, 0x80	; 128
    1338:	fc 01       	movw	r30, r24
    133a:	20 83       	st	Z, r18
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    133c:	81 ec       	ldi	r24, 0xC1	; 193
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	fc 01       	movw	r30, r24
    1342:	10 82       	st	Z, r1
#endif
}
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	08 95       	ret

0000134a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	69 97       	sbiw	r28, 0x19	; 25
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	de bf       	out	0x3e, r29	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	cd bf       	out	0x3d, r28	; 61
    135e:	88 8f       	std	Y+24, r24	; 0x18
    1360:	69 8f       	std	Y+25, r22	; 0x19
	uint8_t bit = digitalPinToBitMask(pin);
    1362:	88 8d       	ldd	r24, Y+24	; 0x18
    1364:	88 2f       	mov	r24, r24
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	8f 56       	subi	r24, 0x6F	; 111
    136a:	9f 4f       	sbci	r25, 0xFF	; 255
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
    1374:	fc 01       	movw	r30, r24
    1376:	84 91       	lpm	r24, Z
    1378:	8b 83       	std	Y+3, r24	; 0x03
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t port = digitalPinToPort(pin);
    137e:	88 8d       	ldd	r24, Y+24	; 0x18
    1380:	88 2f       	mov	r24, r24
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	83 58       	subi	r24, 0x83	; 131
    1386:	9f 4f       	sbci	r25, 0xFF	; 255
    1388:	9e 83       	std	Y+6, r25	; 0x06
    138a:	8d 83       	std	Y+5, r24	; 0x05
    138c:	8d 81       	ldd	r24, Y+5	; 0x05
    138e:	9e 81       	ldd	r25, Y+6	; 0x06
    1390:	fc 01       	movw	r30, r24
    1392:	84 91       	lpm	r24, Z
    1394:	8f 83       	std	Y+7, r24	; 0x07
    1396:	8f 81       	ldd	r24, Y+7	; 0x07
    1398:	88 87       	std	Y+8, r24	; 0x08
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    139a:	88 85       	ldd	r24, Y+8	; 0x08
    139c:	88 23       	and	r24, r24
    139e:	09 f4       	brne	.+2      	; 0x13a2 <pinMode+0x58>
    13a0:	94 c0       	rjmp	.+296    	; 0x14ca <pinMode+0x180>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    13a2:	88 85       	ldd	r24, Y+8	; 0x08
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	87 59       	subi	r24, 0x97	; 151
    13ae:	9f 4f       	sbci	r25, 0xFF	; 255
    13b0:	9a 87       	std	Y+10, r25	; 0x0a
    13b2:	89 87       	std	Y+9, r24	; 0x09
    13b4:	89 85       	ldd	r24, Y+9	; 0x09
    13b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b8:	fc 01       	movw	r30, r24
    13ba:	25 91       	lpm	r18, Z+
    13bc:	34 91       	lpm	r19, Z
    13be:	cf 01       	movw	r24, r30
    13c0:	3c 87       	std	Y+12, r19	; 0x0c
    13c2:	2b 87       	std	Y+11, r18	; 0x0b
    13c4:	9a 87       	std	Y+10, r25	; 0x0a
    13c6:	89 87       	std	Y+9, r24	; 0x09
    13c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    13ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    13cc:	9e 87       	std	Y+14, r25	; 0x0e
    13ce:	8d 87       	std	Y+13, r24	; 0x0d
	out = portOutputRegister(port);
    13d0:	88 85       	ldd	r24, Y+8	; 0x08
    13d2:	88 2f       	mov	r24, r24
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	8d 58       	subi	r24, 0x8D	; 141
    13dc:	9f 4f       	sbci	r25, 0xFF	; 255
    13de:	98 8b       	std	Y+16, r25	; 0x10
    13e0:	8f 87       	std	Y+15, r24	; 0x0f
    13e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e4:	98 89       	ldd	r25, Y+16	; 0x10
    13e6:	fc 01       	movw	r30, r24
    13e8:	25 91       	lpm	r18, Z+
    13ea:	34 91       	lpm	r19, Z
    13ec:	cf 01       	movw	r24, r30
    13ee:	3a 8b       	std	Y+18, r19	; 0x12
    13f0:	29 8b       	std	Y+17, r18	; 0x11
    13f2:	98 8b       	std	Y+16, r25	; 0x10
    13f4:	8f 87       	std	Y+15, r24	; 0x0f
    13f6:	89 89       	ldd	r24, Y+17	; 0x11
    13f8:	9a 89       	ldd	r25, Y+18	; 0x12
    13fa:	9c 8b       	std	Y+20, r25	; 0x14
    13fc:	8b 8b       	std	Y+19, r24	; 0x13

	if (mode == INPUT) { 
    13fe:	89 8d       	ldd	r24, Y+25	; 0x19
    1400:	88 23       	and	r24, r24
    1402:	31 f5       	brne	.+76     	; 0x1450 <pinMode+0x106>
		uint8_t oldSREG = SREG;
    1404:	8f e5       	ldi	r24, 0x5F	; 95
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	fc 01       	movw	r30, r24
    140a:	80 81       	ld	r24, Z
    140c:	8d 8b       	std	Y+21, r24	; 0x15
                cli();
    140e:	f8 94       	cli
		*reg &= ~bit;
    1410:	8d 85       	ldd	r24, Y+13	; 0x0d
    1412:	9e 85       	ldd	r25, Y+14	; 0x0e
    1414:	fc 01       	movw	r30, r24
    1416:	80 81       	ld	r24, Z
    1418:	98 2f       	mov	r25, r24
    141a:	8c 81       	ldd	r24, Y+4	; 0x04
    141c:	80 95       	com	r24
    141e:	89 23       	and	r24, r25
    1420:	28 2f       	mov	r18, r24
    1422:	8d 85       	ldd	r24, Y+13	; 0x0d
    1424:	9e 85       	ldd	r25, Y+14	; 0x0e
    1426:	fc 01       	movw	r30, r24
    1428:	20 83       	st	Z, r18
		*out &= ~bit;
    142a:	8b 89       	ldd	r24, Y+19	; 0x13
    142c:	9c 89       	ldd	r25, Y+20	; 0x14
    142e:	fc 01       	movw	r30, r24
    1430:	80 81       	ld	r24, Z
    1432:	98 2f       	mov	r25, r24
    1434:	8c 81       	ldd	r24, Y+4	; 0x04
    1436:	80 95       	com	r24
    1438:	89 23       	and	r24, r25
    143a:	28 2f       	mov	r18, r24
    143c:	8b 89       	ldd	r24, Y+19	; 0x13
    143e:	9c 89       	ldd	r25, Y+20	; 0x14
    1440:	fc 01       	movw	r30, r24
    1442:	20 83       	st	Z, r18
		SREG = oldSREG;
    1444:	8f e5       	ldi	r24, 0x5F	; 95
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	2d 89       	ldd	r18, Y+21	; 0x15
    144a:	fc 01       	movw	r30, r24
    144c:	20 83       	st	Z, r18
    144e:	3d c0       	rjmp	.+122    	; 0x14ca <pinMode+0x180>
	} else if (mode == INPUT_PULLUP) {
    1450:	89 8d       	ldd	r24, Y+25	; 0x19
    1452:	82 30       	cpi	r24, 0x02	; 2
    1454:	21 f5       	brne	.+72     	; 0x149e <pinMode+0x154>
		uint8_t oldSREG = SREG;
    1456:	8f e5       	ldi	r24, 0x5F	; 95
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	fc 01       	movw	r30, r24
    145c:	80 81       	ld	r24, Z
    145e:	8e 8b       	std	Y+22, r24	; 0x16
                cli();
    1460:	f8 94       	cli
		*reg &= ~bit;
    1462:	8d 85       	ldd	r24, Y+13	; 0x0d
    1464:	9e 85       	ldd	r25, Y+14	; 0x0e
    1466:	fc 01       	movw	r30, r24
    1468:	80 81       	ld	r24, Z
    146a:	98 2f       	mov	r25, r24
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	80 95       	com	r24
    1470:	89 23       	and	r24, r25
    1472:	28 2f       	mov	r18, r24
    1474:	8d 85       	ldd	r24, Y+13	; 0x0d
    1476:	9e 85       	ldd	r25, Y+14	; 0x0e
    1478:	fc 01       	movw	r30, r24
    147a:	20 83       	st	Z, r18
		*out |= bit;
    147c:	8b 89       	ldd	r24, Y+19	; 0x13
    147e:	9c 89       	ldd	r25, Y+20	; 0x14
    1480:	fc 01       	movw	r30, r24
    1482:	90 81       	ld	r25, Z
    1484:	8c 81       	ldd	r24, Y+4	; 0x04
    1486:	29 2f       	mov	r18, r25
    1488:	28 2b       	or	r18, r24
    148a:	8b 89       	ldd	r24, Y+19	; 0x13
    148c:	9c 89       	ldd	r25, Y+20	; 0x14
    148e:	fc 01       	movw	r30, r24
    1490:	20 83       	st	Z, r18
		SREG = oldSREG;
    1492:	8f e5       	ldi	r24, 0x5F	; 95
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	2e 89       	ldd	r18, Y+22	; 0x16
    1498:	fc 01       	movw	r30, r24
    149a:	20 83       	st	Z, r18
    149c:	16 c0       	rjmp	.+44     	; 0x14ca <pinMode+0x180>
	} else {
		uint8_t oldSREG = SREG;
    149e:	8f e5       	ldi	r24, 0x5F	; 95
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	fc 01       	movw	r30, r24
    14a4:	80 81       	ld	r24, Z
    14a6:	8f 8b       	std	Y+23, r24	; 0x17
                cli();
    14a8:	f8 94       	cli
		*reg |= bit;
    14aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ae:	fc 01       	movw	r30, r24
    14b0:	90 81       	ld	r25, Z
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	29 2f       	mov	r18, r25
    14b6:	28 2b       	or	r18, r24
    14b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    14bc:	fc 01       	movw	r30, r24
    14be:	20 83       	st	Z, r18
		SREG = oldSREG;
    14c0:	8f e5       	ldi	r24, 0x5F	; 95
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	2f 89       	ldd	r18, Y+23	; 0x17
    14c6:	fc 01       	movw	r30, r24
    14c8:	20 83       	st	Z, r18
	}
}
    14ca:	69 96       	adiw	r28, 0x19	; 25
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	08 95       	ret

000014dc <turnOffPWM>:
// - Added more #ifdefs, now compiles for atmega645
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	1f 92       	push	r1
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	89 83       	std	Y+1, r24	; 0x01
	switch (timer)
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	88 2f       	mov	r24, r24
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	83 30       	cpi	r24, 0x03	; 3
    14f0:	91 05       	cpc	r25, r1
    14f2:	a1 f0       	breq	.+40     	; 0x151c <turnOffPWM+0x40>
    14f4:	84 30       	cpi	r24, 0x04	; 4
    14f6:	91 05       	cpc	r25, r1
    14f8:	3c f4       	brge	.+14     	; 0x1508 <turnOffPWM+0x2c>
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	91 05       	cpc	r25, r1
    14fe:	11 f1       	breq	.+68     	; 0x1544 <turnOffPWM+0x68>
    1500:	82 30       	cpi	r24, 0x02	; 2
    1502:	91 05       	cpc	r25, r1
    1504:	49 f1       	breq	.+82     	; 0x1558 <turnOffPWM+0x7c>
    1506:	46 c0       	rjmp	.+140    	; 0x1594 <turnOffPWM+0xb8>
    1508:	87 30       	cpi	r24, 0x07	; 7
    150a:	91 05       	cpc	r25, r1
    150c:	79 f1       	breq	.+94     	; 0x156c <turnOffPWM+0x90>
    150e:	88 30       	cpi	r24, 0x08	; 8
    1510:	91 05       	cpc	r25, r1
    1512:	b1 f1       	breq	.+108    	; 0x1580 <turnOffPWM+0xa4>
    1514:	84 30       	cpi	r24, 0x04	; 4
    1516:	91 05       	cpc	r25, r1
    1518:	59 f0       	breq	.+22     	; 0x1530 <turnOffPWM+0x54>
    151a:	3c c0       	rjmp	.+120    	; 0x1594 <turnOffPWM+0xb8>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    151c:	80 e8       	ldi	r24, 0x80	; 128
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	20 e8       	ldi	r18, 0x80	; 128
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	f9 01       	movw	r30, r18
    1526:	20 81       	ld	r18, Z
    1528:	2f 77       	andi	r18, 0x7F	; 127
    152a:	fc 01       	movw	r30, r24
    152c:	20 83       	st	Z, r18
    152e:	32 c0       	rjmp	.+100    	; 0x1594 <turnOffPWM+0xb8>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1530:	80 e8       	ldi	r24, 0x80	; 128
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	20 e8       	ldi	r18, 0x80	; 128
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	f9 01       	movw	r30, r18
    153a:	20 81       	ld	r18, Z
    153c:	2f 7d       	andi	r18, 0xDF	; 223
    153e:	fc 01       	movw	r30, r24
    1540:	20 83       	st	Z, r18
    1542:	28 c0       	rjmp	.+80     	; 0x1594 <turnOffPWM+0xb8>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1544:	84 e4       	ldi	r24, 0x44	; 68
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	24 e4       	ldi	r18, 0x44	; 68
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	f9 01       	movw	r30, r18
    154e:	20 81       	ld	r18, Z
    1550:	2f 77       	andi	r18, 0x7F	; 127
    1552:	fc 01       	movw	r30, r24
    1554:	20 83       	st	Z, r18
    1556:	1e c0       	rjmp	.+60     	; 0x1594 <turnOffPWM+0xb8>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1558:	84 e4       	ldi	r24, 0x44	; 68
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	24 e4       	ldi	r18, 0x44	; 68
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	f9 01       	movw	r30, r18
    1562:	20 81       	ld	r18, Z
    1564:	2f 7d       	andi	r18, 0xDF	; 223
    1566:	fc 01       	movw	r30, r24
    1568:	20 83       	st	Z, r18
    156a:	14 c0       	rjmp	.+40     	; 0x1594 <turnOffPWM+0xb8>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    156c:	80 eb       	ldi	r24, 0xB0	; 176
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	20 eb       	ldi	r18, 0xB0	; 176
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	f9 01       	movw	r30, r18
    1576:	20 81       	ld	r18, Z
    1578:	2f 77       	andi	r18, 0x7F	; 127
    157a:	fc 01       	movw	r30, r24
    157c:	20 83       	st	Z, r18
    157e:	0a c0       	rjmp	.+20     	; 0x1594 <turnOffPWM+0xb8>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1580:	80 eb       	ldi	r24, 0xB0	; 176
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	20 eb       	ldi	r18, 0xB0	; 176
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	f9 01       	movw	r30, r18
    158a:	20 81       	ld	r18, Z
    158c:	2f 7d       	andi	r18, 0xDF	; 223
    158e:	fc 01       	movw	r30, r24
    1590:	20 83       	st	Z, r18
    1592:	00 00       	nop
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
    1594:	0f 90       	pop	r0
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	08 95       	ret

0000159c <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	65 97       	sbiw	r28, 0x15	; 21
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	8c 8b       	std	Y+20, r24	; 0x14
    15b2:	6d 8b       	std	Y+21, r22	; 0x15
	uint8_t timer = digitalPinToTimer(pin);
    15b4:	8c 89       	ldd	r24, Y+20	; 0x14
    15b6:	88 2f       	mov	r24, r24
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	8b 55       	subi	r24, 0x5B	; 91
    15bc:	9f 4f       	sbci	r25, 0xFF	; 255
    15be:	9a 83       	std	Y+2, r25	; 0x02
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	9a 81       	ldd	r25, Y+2	; 0x02
    15c6:	fc 01       	movw	r30, r24
    15c8:	84 91       	lpm	r24, Z
    15ca:	8b 83       	std	Y+3, r24	; 0x03
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t bit = digitalPinToBitMask(pin);
    15d0:	8c 89       	ldd	r24, Y+20	; 0x14
    15d2:	88 2f       	mov	r24, r24
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	8f 56       	subi	r24, 0x6F	; 111
    15d8:	9f 4f       	sbci	r25, 0xFF	; 255
    15da:	9e 83       	std	Y+6, r25	; 0x06
    15dc:	8d 83       	std	Y+5, r24	; 0x05
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	9e 81       	ldd	r25, Y+6	; 0x06
    15e2:	fc 01       	movw	r30, r24
    15e4:	84 91       	lpm	r24, Z
    15e6:	8f 83       	std	Y+7, r24	; 0x07
    15e8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ea:	88 87       	std	Y+8, r24	; 0x08
	uint8_t port = digitalPinToPort(pin);
    15ec:	8c 89       	ldd	r24, Y+20	; 0x14
    15ee:	88 2f       	mov	r24, r24
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	83 58       	subi	r24, 0x83	; 131
    15f4:	9f 4f       	sbci	r25, 0xFF	; 255
    15f6:	9a 87       	std	Y+10, r25	; 0x0a
    15f8:	89 87       	std	Y+9, r24	; 0x09
    15fa:	89 85       	ldd	r24, Y+9	; 0x09
    15fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fe:	fc 01       	movw	r30, r24
    1600:	84 91       	lpm	r24, Z
    1602:	8b 87       	std	Y+11, r24	; 0x0b
    1604:	8b 85       	ldd	r24, Y+11	; 0x0b
    1606:	8c 87       	std	Y+12, r24	; 0x0c
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1608:	8c 85       	ldd	r24, Y+12	; 0x0c
    160a:	88 23       	and	r24, r24
    160c:	09 f4       	brne	.+2      	; 0x1610 <digitalWrite+0x74>
    160e:	43 c0       	rjmp	.+134    	; 0x1696 <digitalWrite+0xfa>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1610:	8c 81       	ldd	r24, Y+4	; 0x04
    1612:	88 23       	and	r24, r24
    1614:	11 f0       	breq	.+4      	; 0x161a <digitalWrite+0x7e>
    1616:	8c 81       	ldd	r24, Y+4	; 0x04
    1618:	61 df       	rcall	.-318    	; 0x14dc <turnOffPWM>
    161a:	8c 85       	ldd	r24, Y+12	; 0x0c

	out = portOutputRegister(port);
    161c:	88 2f       	mov	r24, r24
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	8d 58       	subi	r24, 0x8D	; 141
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	9e 87       	std	Y+14, r25	; 0x0e
    162a:	8d 87       	std	Y+13, r24	; 0x0d
    162c:	8d 85       	ldd	r24, Y+13	; 0x0d
    162e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1630:	fc 01       	movw	r30, r24
    1632:	25 91       	lpm	r18, Z+
    1634:	34 91       	lpm	r19, Z
    1636:	cf 01       	movw	r24, r30
    1638:	38 8b       	std	Y+16, r19	; 0x10
    163a:	2f 87       	std	Y+15, r18	; 0x0f
    163c:	9e 87       	std	Y+14, r25	; 0x0e
    163e:	8d 87       	std	Y+13, r24	; 0x0d
    1640:	8f 85       	ldd	r24, Y+15	; 0x0f
    1642:	98 89       	ldd	r25, Y+16	; 0x10
    1644:	9a 8b       	std	Y+18, r25	; 0x12
    1646:	89 8b       	std	Y+17, r24	; 0x11
    1648:	8f e5       	ldi	r24, 0x5F	; 95

	uint8_t oldSREG = SREG;
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	fc 01       	movw	r30, r24
    164e:	80 81       	ld	r24, Z
    1650:	8b 8b       	std	Y+19, r24	; 0x13
    1652:	f8 94       	cli
	cli();
    1654:	8d 89       	ldd	r24, Y+21	; 0x15

	if (val == LOW) {
    1656:	88 23       	and	r24, r24
    1658:	71 f4       	brne	.+28     	; 0x1676 <digitalWrite+0xda>
    165a:	89 89       	ldd	r24, Y+17	; 0x11
		*out &= ~bit;
    165c:	9a 89       	ldd	r25, Y+18	; 0x12
    165e:	fc 01       	movw	r30, r24
    1660:	80 81       	ld	r24, Z
    1662:	98 2f       	mov	r25, r24
    1664:	88 85       	ldd	r24, Y+8	; 0x08
    1666:	80 95       	com	r24
    1668:	89 23       	and	r24, r25
    166a:	28 2f       	mov	r18, r24
    166c:	89 89       	ldd	r24, Y+17	; 0x11
    166e:	9a 89       	ldd	r25, Y+18	; 0x12
    1670:	fc 01       	movw	r30, r24
    1672:	20 83       	st	Z, r18
    1674:	0b c0       	rjmp	.+22     	; 0x168c <digitalWrite+0xf0>
    1676:	89 89       	ldd	r24, Y+17	; 0x11
	} else {
		*out |= bit;
    1678:	9a 89       	ldd	r25, Y+18	; 0x12
    167a:	fc 01       	movw	r30, r24
    167c:	90 81       	ld	r25, Z
    167e:	88 85       	ldd	r24, Y+8	; 0x08
    1680:	29 2f       	mov	r18, r25
    1682:	28 2b       	or	r18, r24
    1684:	89 89       	ldd	r24, Y+17	; 0x11
    1686:	9a 89       	ldd	r25, Y+18	; 0x12
    1688:	fc 01       	movw	r30, r24
    168a:	20 83       	st	Z, r18
    168c:	8f e5       	ldi	r24, 0x5F	; 95
	}

	SREG = oldSREG;
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	2b 89       	ldd	r18, Y+19	; 0x13
    1692:	fc 01       	movw	r30, r24
    1694:	20 83       	st	Z, r18
    1696:	65 96       	adiw	r28, 0x15	; 21
}
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	08 95       	ret

000016a8 <_Z5task1Pv>:

#define STACK_SIZE   200
#define LED_PIN      6

void task1(void *p)
{
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	00 d0       	rcall	.+0      	; 0x16ae <_Z5task1Pv+0x6>
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
    16b2:	9a 83       	std	Y+2, r25	; 0x02
    16b4:	89 83       	std	Y+1, r24	; 0x01
	for (;;) {
	  digitalWrite(LED_PIN, HIGH);
    16b6:	61 e0       	ldi	r22, 0x01	; 1
    16b8:	86 e0       	ldi	r24, 0x06	; 6
    16ba:	70 df       	rcall	.-288    	; 0x159c <digitalWrite>
    16bc:	68 ee       	ldi	r22, 0xE8	; 232
	  delay(1000);
    16be:	73 e0       	ldi	r23, 0x03	; 3
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	72 dd       	rcall	.-1308   	; 0x11aa <delay>
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	86 e0       	ldi	r24, 0x06	; 6
	  digitalWrite(LED_PIN, LOW);
    16ca:	68 df       	rcall	.-304    	; 0x159c <digitalWrite>
    16cc:	68 ee       	ldi	r22, 0xE8	; 232
    16ce:	73 e0       	ldi	r23, 0x03	; 3
    16d0:	80 e0       	ldi	r24, 0x00	; 0
	  delay(1000);
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	6a dd       	rcall	.-1324   	; 0x11aa <delay>
    16d6:	ef cf       	rjmp	.-34     	; 0x16b6 <_Z5task1Pv+0xe>

000016d8 <setup>:
	}
}

void setup()
{
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
	pinMode(LED_PIN, OUTPUT);
    16e0:	61 e0       	ldi	r22, 0x01	; 1
    16e2:	86 e0       	ldi	r24, 0x06	; 6
    16e4:	32 de       	rcall	.-924    	; 0x134a <pinMode>
    16e6:	df 91       	pop	r29
}
    16e8:	cf 91       	pop	r28
    16ea:	08 95       	ret

000016ec <loop>:

void loop() {
    16ec:	af 92       	push	r10
    16ee:	bf 92       	push	r11
    16f0:	cf 92       	push	r12
    16f2:	df 92       	push	r13
    16f4:	ef 92       	push	r14
    16f6:	ff 92       	push	r15
    16f8:	0f 93       	push	r16
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
	xTaskCreate(task1,           // Pointer to the task entry function
		     "Task1",         // Task name
		     STACK_SIZE,      // Stack size
		     NULL,            // Pointer that will be used as parameter
		     1,               // Task priority
		    NULL);           // Used to pass back a handle by which the created task can be referenced.
    1702:	a1 2c       	mov	r10, r1
    1704:	b1 2c       	mov	r11, r1
    1706:	c1 2c       	mov	r12, r1
    1708:	d1 2c       	mov	r13, r1
    170a:	e1 2c       	mov	r14, r1
    170c:	f1 2c       	mov	r15, r1
    170e:	01 e0       	ldi	r16, 0x01	; 1
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	48 ec       	ldi	r20, 0xC8	; 200
    1716:	50 e0       	ldi	r21, 0x00	; 0
    1718:	61 e1       	ldi	r22, 0x11	; 17
    171a:	71 e0       	ldi	r23, 0x01	; 1
    171c:	84 e5       	ldi	r24, 0x54	; 84
    171e:	9b e0       	ldi	r25, 0x0B	; 11
    1720:	2d d0       	rcall	.+90     	; 0x177c <xTaskGenericCreate>
    1722:	1f d1       	rcall	.+574    	; 0x1962 <vTaskStartScheduler>
	vTaskStartScheduler();
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
}
    1728:	0f 91       	pop	r16
    172a:	ff 90       	pop	r15
    172c:	ef 90       	pop	r14
    172e:	df 90       	pop	r13
    1730:	cf 90       	pop	r12
    1732:	bf 90       	pop	r11
    1734:	af 90       	pop	r10
    1736:	08 95       	ret

00001738 <prvResetNextTaskUnblockTime>:
    1738:	e0 91 2c 02 	lds	r30, 0x022C
    173c:	f0 91 2d 02 	lds	r31, 0x022D
    1740:	80 81       	ld	r24, Z
    1742:	81 11       	cpse	r24, r1
    1744:	04 c0       	rjmp	.+8      	; 0x174e <prvResetNextTaskUnblockTime+0x16>
    1746:	8f ef       	ldi	r24, 0xFF	; 255
    1748:	9f ef       	ldi	r25, 0xFF	; 255
    174a:	dc 01       	movw	r26, r24
    174c:	0e c0       	rjmp	.+28     	; 0x176a <prvResetNextTaskUnblockTime+0x32>
    174e:	e0 91 2c 02 	lds	r30, 0x022C
    1752:	f0 91 2d 02 	lds	r31, 0x022D
    1756:	07 80       	ldd	r0, Z+7	; 0x07
    1758:	f0 85       	ldd	r31, Z+8	; 0x08
    175a:	e0 2d       	mov	r30, r0
    175c:	00 84       	ldd	r0, Z+8	; 0x08
    175e:	f1 85       	ldd	r31, Z+9	; 0x09
    1760:	e0 2d       	mov	r30, r0
    1762:	82 81       	ldd	r24, Z+2	; 0x02
    1764:	93 81       	ldd	r25, Z+3	; 0x03
    1766:	a4 81       	ldd	r26, Z+4	; 0x04
    1768:	b5 81       	ldd	r27, Z+5	; 0x05
    176a:	80 93 04 02 	sts	0x0204, r24
    176e:	90 93 05 02 	sts	0x0205, r25
    1772:	a0 93 06 02 	sts	0x0206, r26
    1776:	b0 93 07 02 	sts	0x0207, r27
    177a:	08 95       	ret

0000177c <xTaskGenericCreate>:
    177c:	5f 92       	push	r5
    177e:	6f 92       	push	r6
    1780:	7f 92       	push	r7
    1782:	8f 92       	push	r8
    1784:	9f 92       	push	r9
    1786:	af 92       	push	r10
    1788:	bf 92       	push	r11
    178a:	cf 92       	push	r12
    178c:	df 92       	push	r13
    178e:	ef 92       	push	r14
    1790:	ff 92       	push	r15
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	4c 01       	movw	r8, r24
    179c:	16 2f       	mov	r17, r22
    179e:	57 2e       	mov	r5, r23
    17a0:	5a 01       	movw	r10, r20
    17a2:	39 01       	movw	r6, r18
    17a4:	c1 14       	cp	r12, r1
    17a6:	d1 04       	cpc	r13, r1
    17a8:	31 f4       	brne	.+12     	; 0x17b6 <xTaskGenericCreate+0x3a>
    17aa:	ca 01       	movw	r24, r20
    17ac:	c3 d2       	rcall	.+1414   	; 0x1d34 <pvPortMalloc>
    17ae:	6c 01       	movw	r12, r24
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <xTaskGenericCreate+0x3a>
    17b4:	c5 c0       	rjmp	.+394    	; 0x1940 <xTaskGenericCreate+0x1c4>
    17b6:	8a e2       	ldi	r24, 0x2A	; 42
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	bc d2       	rcall	.+1400   	; 0x1d34 <pvPortMalloc>
    17bc:	ec 01       	movw	r28, r24
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	61 f0       	breq	.+24     	; 0x17da <xTaskGenericCreate+0x5e>
    17c2:	dc 8e       	std	Y+28, r13	; 0x1c
    17c4:	cb 8e       	std	Y+27, r12	; 0x1b
    17c6:	21 e0       	ldi	r18, 0x01	; 1
    17c8:	a2 1a       	sub	r10, r18
    17ca:	b1 08       	sbc	r11, r1
    17cc:	ac 0c       	add	r10, r12
    17ce:	bd 1c       	adc	r11, r13
    17d0:	e1 2f       	mov	r30, r17
    17d2:	f5 2d       	mov	r31, r5
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	07 c0       	rjmp	.+14     	; 0x17e8 <xTaskGenericCreate+0x6c>
    17da:	c6 01       	movw	r24, r12
    17dc:	3b d3       	rcall	.+1654   	; 0x1e54 <vPortFree>
    17de:	b0 c0       	rjmp	.+352    	; 0x1940 <xTaskGenericCreate+0x1c4>
    17e0:	01 96       	adiw	r24, 0x01	; 1
    17e2:	88 30       	cpi	r24, 0x08	; 8
    17e4:	91 05       	cpc	r25, r1
    17e6:	61 f0       	breq	.+24     	; 0x1800 <xTaskGenericCreate+0x84>
    17e8:	bf 01       	movw	r22, r30
    17ea:	41 91       	ld	r20, Z+
    17ec:	9e 01       	movw	r18, r28
    17ee:	28 0f       	add	r18, r24
    17f0:	39 1f       	adc	r19, r25
    17f2:	d9 01       	movw	r26, r18
    17f4:	5d 96       	adiw	r26, 0x1d	; 29
    17f6:	4c 93       	st	X, r20
    17f8:	db 01       	movw	r26, r22
    17fa:	2c 91       	ld	r18, X
    17fc:	21 11       	cpse	r18, r1
    17fe:	f0 cf       	rjmp	.-32     	; 0x17e0 <xTaskGenericCreate+0x64>
    1800:	1c a2       	std	Y+36, r1	; 0x24
    1802:	10 2f       	mov	r17, r16
    1804:	0a 30       	cpi	r16, 0x0A	; 10
    1806:	08 f0       	brcs	.+2      	; 0x180a <xTaskGenericCreate+0x8e>
    1808:	19 e0       	ldi	r17, 0x09	; 9
    180a:	1a 8f       	std	Y+26, r17	; 0x1a
    180c:	6e 01       	movw	r12, r28
    180e:	b2 e0       	ldi	r27, 0x02	; 2
    1810:	cb 0e       	add	r12, r27
    1812:	d1 1c       	adc	r13, r1
    1814:	c6 01       	movw	r24, r12
    1816:	b4 d4       	rcall	.+2408   	; 0x2180 <vListInitialiseItem>
    1818:	ce 01       	movw	r24, r28
    181a:	0e 96       	adiw	r24, 0x0e	; 14
    181c:	b1 d4       	rcall	.+2402   	; 0x2180 <vListInitialiseItem>
    181e:	db 87       	std	Y+11, r29	; 0x0b
    1820:	ca 87       	std	Y+10, r28	; 0x0a
    1822:	8a e0       	ldi	r24, 0x0A	; 10
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	a0 e0       	ldi	r26, 0x00	; 0
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	81 1b       	sub	r24, r17
    182c:	91 09       	sbc	r25, r1
    182e:	a1 09       	sbc	r26, r1
    1830:	b1 09       	sbc	r27, r1
    1832:	8e 87       	std	Y+14, r24	; 0x0e
    1834:	9f 87       	std	Y+15, r25	; 0x0f
    1836:	a8 8b       	std	Y+16, r26	; 0x10
    1838:	b9 8b       	std	Y+17, r27	; 0x11
    183a:	df 8b       	std	Y+23, r29	; 0x17
    183c:	ce 8b       	std	Y+22, r28	; 0x16
    183e:	1d a2       	std	Y+37, r1	; 0x25
    1840:	1e a2       	std	Y+38, r1	; 0x26
    1842:	1f a2       	std	Y+39, r1	; 0x27
    1844:	18 a6       	std	Y+40, r1	; 0x28
    1846:	19 a6       	std	Y+41, r1	; 0x29
    1848:	a3 01       	movw	r20, r6
    184a:	b4 01       	movw	r22, r8
    184c:	c5 01       	movw	r24, r10
    184e:	2c d3       	rcall	.+1624   	; 0x1ea8 <pxPortInitialiseStack>
    1850:	99 83       	std	Y+1, r25	; 0x01
    1852:	88 83       	st	Y, r24
    1854:	e1 14       	cp	r14, r1
    1856:	f1 04       	cpc	r15, r1
    1858:	19 f0       	breq	.+6      	; 0x1860 <xTaskGenericCreate+0xe4>
    185a:	f7 01       	movw	r30, r14
    185c:	d1 83       	std	Z+1, r29	; 0x01
    185e:	c0 83       	st	Z, r28
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	0f 92       	push	r0
    1866:	80 91 12 02 	lds	r24, 0x0212
    186a:	8f 5f       	subi	r24, 0xFF	; 255
    186c:	80 93 12 02 	sts	0x0212, r24
    1870:	80 91 b2 02 	lds	r24, 0x02B2
    1874:	90 91 b3 02 	lds	r25, 0x02B3
    1878:	89 2b       	or	r24, r25
    187a:	79 f5       	brne	.+94     	; 0x18da <xTaskGenericCreate+0x15e>
    187c:	d0 93 b3 02 	sts	0x02B3, r29
    1880:	c0 93 b2 02 	sts	0x02B2, r28
    1884:	80 91 12 02 	lds	r24, 0x0212
    1888:	81 30       	cpi	r24, 0x01	; 1
    188a:	b1 f5       	brne	.+108    	; 0x18f8 <xTaskGenericCreate+0x17c>
    188c:	84 e4       	ldi	r24, 0x44	; 68
    188e:	e8 2e       	mov	r14, r24
    1890:	82 e0       	ldi	r24, 0x02	; 2
    1892:	f8 2e       	mov	r15, r24
    1894:	c7 01       	movw	r24, r14
    1896:	63 d4       	rcall	.+2246   	; 0x215e <vListInitialise>
    1898:	fb e0       	ldi	r31, 0x0B	; 11
    189a:	ef 0e       	add	r14, r31
    189c:	f1 1c       	adc	r15, r1
    189e:	22 eb       	ldi	r18, 0xB2	; 178
    18a0:	e2 16       	cp	r14, r18
    18a2:	22 e0       	ldi	r18, 0x02	; 2
    18a4:	f2 06       	cpc	r15, r18
    18a6:	b1 f7       	brne	.-20     	; 0x1894 <xTaskGenericCreate+0x118>
    18a8:	89 e3       	ldi	r24, 0x39	; 57
    18aa:	92 e0       	ldi	r25, 0x02	; 2
    18ac:	58 d4       	rcall	.+2224   	; 0x215e <vListInitialise>
    18ae:	8e e2       	ldi	r24, 0x2E	; 46
    18b0:	92 e0       	ldi	r25, 0x02	; 2
    18b2:	55 d4       	rcall	.+2218   	; 0x215e <vListInitialise>
    18b4:	8f e1       	ldi	r24, 0x1F	; 31
    18b6:	92 e0       	ldi	r25, 0x02	; 2
    18b8:	52 d4       	rcall	.+2212   	; 0x215e <vListInitialise>
    18ba:	84 e1       	ldi	r24, 0x14	; 20
    18bc:	92 e0       	ldi	r25, 0x02	; 2
    18be:	4f d4       	rcall	.+2206   	; 0x215e <vListInitialise>
    18c0:	89 e3       	ldi	r24, 0x39	; 57
    18c2:	92 e0       	ldi	r25, 0x02	; 2
    18c4:	90 93 2d 02 	sts	0x022D, r25
    18c8:	80 93 2c 02 	sts	0x022C, r24
    18cc:	8e e2       	ldi	r24, 0x2E	; 46
    18ce:	92 e0       	ldi	r25, 0x02	; 2
    18d0:	90 93 2b 02 	sts	0x022B, r25
    18d4:	80 93 2a 02 	sts	0x022A, r24
    18d8:	0f c0       	rjmp	.+30     	; 0x18f8 <xTaskGenericCreate+0x17c>
    18da:	80 91 0c 02 	lds	r24, 0x020C
    18de:	81 11       	cpse	r24, r1
    18e0:	0b c0       	rjmp	.+22     	; 0x18f8 <xTaskGenericCreate+0x17c>
    18e2:	e0 91 b2 02 	lds	r30, 0x02B2
    18e6:	f0 91 b3 02 	lds	r31, 0x02B3
    18ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    18ec:	08 17       	cp	r16, r24
    18ee:	20 f0       	brcs	.+8      	; 0x18f8 <xTaskGenericCreate+0x17c>
    18f0:	d0 93 b3 02 	sts	0x02B3, r29
    18f4:	c0 93 b2 02 	sts	0x02B2, r28
    18f8:	80 91 08 02 	lds	r24, 0x0208
    18fc:	8f 5f       	subi	r24, 0xFF	; 255
    18fe:	80 93 08 02 	sts	0x0208, r24
    1902:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1904:	90 91 0d 02 	lds	r25, 0x020D
    1908:	98 17       	cp	r25, r24
    190a:	10 f4       	brcc	.+4      	; 0x1910 <xTaskGenericCreate+0x194>
    190c:	80 93 0d 02 	sts	0x020D, r24
    1910:	ab e0       	ldi	r26, 0x0B	; 11
    1912:	8a 9f       	mul	r24, r26
    1914:	c0 01       	movw	r24, r0
    1916:	11 24       	eor	r1, r1
    1918:	b6 01       	movw	r22, r12
    191a:	8c 5b       	subi	r24, 0xBC	; 188
    191c:	9d 4f       	sbci	r25, 0xFD	; 253
    191e:	34 d4       	rcall	.+2152   	; 0x2188 <vListInsertEnd>
    1920:	0f 90       	pop	r0
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	80 91 0c 02 	lds	r24, 0x020C
    1928:	88 23       	and	r24, r24
    192a:	41 f0       	breq	.+16     	; 0x193c <xTaskGenericCreate+0x1c0>
    192c:	e0 91 b2 02 	lds	r30, 0x02B2
    1930:	f0 91 b3 02 	lds	r31, 0x02B3
    1934:	82 8d       	ldd	r24, Z+26	; 0x1a
    1936:	80 17       	cp	r24, r16
    1938:	08 f4       	brcc	.+2      	; 0x193c <xTaskGenericCreate+0x1c0>
    193a:	5d d3       	rcall	.+1722   	; 0x1ff6 <vPortYield>
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <xTaskGenericCreate+0x1c6>
    1940:	8f ef       	ldi	r24, 0xFF	; 255
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	1f 91       	pop	r17
    1948:	0f 91       	pop	r16
    194a:	ff 90       	pop	r15
    194c:	ef 90       	pop	r14
    194e:	df 90       	pop	r13
    1950:	cf 90       	pop	r12
    1952:	bf 90       	pop	r11
    1954:	af 90       	pop	r10
    1956:	9f 90       	pop	r9
    1958:	8f 90       	pop	r8
    195a:	7f 90       	pop	r7
    195c:	6f 90       	pop	r6
    195e:	5f 90       	pop	r5
    1960:	08 95       	ret

00001962 <vTaskStartScheduler>:
    1962:	af 92       	push	r10
    1964:	bf 92       	push	r11
    1966:	cf 92       	push	r12
    1968:	df 92       	push	r13
    196a:	ef 92       	push	r14
    196c:	ff 92       	push	r15
    196e:	0f 93       	push	r16
    1970:	a1 2c       	mov	r10, r1
    1972:	b1 2c       	mov	r11, r1
    1974:	c1 2c       	mov	r12, r1
    1976:	d1 2c       	mov	r13, r1
    1978:	e1 2c       	mov	r14, r1
    197a:	f1 2c       	mov	r15, r1
    197c:	00 e0       	ldi	r16, 0x00	; 0
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	45 e5       	ldi	r20, 0x55	; 85
    1984:	50 e0       	ldi	r21, 0x00	; 0
    1986:	6b e4       	ldi	r22, 0x4B	; 75
    1988:	71 e0       	ldi	r23, 0x01	; 1
    198a:	8c e2       	ldi	r24, 0x2C	; 44
    198c:	9e e0       	ldi	r25, 0x0E	; 14
    198e:	f6 de       	rcall	.-532    	; 0x177c <xTaskGenericCreate>
    1990:	81 30       	cpi	r24, 0x01	; 1
    1992:	f9 f4       	brne	.+62     	; 0x19d2 <vTaskStartScheduler+0x70>
    1994:	f8 94       	cli
    1996:	8f ef       	ldi	r24, 0xFF	; 255
    1998:	9f ef       	ldi	r25, 0xFF	; 255
    199a:	dc 01       	movw	r26, r24
    199c:	80 93 04 02 	sts	0x0204, r24
    19a0:	90 93 05 02 	sts	0x0205, r25
    19a4:	a0 93 06 02 	sts	0x0206, r26
    19a8:	b0 93 07 02 	sts	0x0207, r27
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	80 93 0c 02 	sts	0x020C, r24
    19b2:	10 92 0e 02 	sts	0x020E, r1
    19b6:	10 92 0f 02 	sts	0x020F, r1
    19ba:	10 92 10 02 	sts	0x0210, r1
    19be:	10 92 11 02 	sts	0x0211, r1
    19c2:	0f 91       	pop	r16
    19c4:	ff 90       	pop	r15
    19c6:	ef 90       	pop	r14
    19c8:	df 90       	pop	r13
    19ca:	cf 90       	pop	r12
    19cc:	bf 90       	pop	r11
    19ce:	af 90       	pop	r10
    19d0:	d7 c2       	rjmp	.+1454   	; 0x1f80 <xPortStartScheduler>
    19d2:	0f 91       	pop	r16
    19d4:	ff 90       	pop	r15
    19d6:	ef 90       	pop	r14
    19d8:	df 90       	pop	r13
    19da:	cf 90       	pop	r12
    19dc:	bf 90       	pop	r11
    19de:	af 90       	pop	r10
    19e0:	08 95       	ret

000019e2 <vTaskSuspendAll>:
    19e2:	80 91 03 02 	lds	r24, 0x0203
    19e6:	8f 5f       	subi	r24, 0xFF	; 255
    19e8:	80 93 03 02 	sts	0x0203, r24
    19ec:	08 95       	ret

000019ee <xTaskIncrementTick>:
    19ee:	af 92       	push	r10
    19f0:	bf 92       	push	r11
    19f2:	cf 92       	push	r12
    19f4:	df 92       	push	r13
    19f6:	ef 92       	push	r14
    19f8:	ff 92       	push	r15
    19fa:	0f 93       	push	r16
    19fc:	1f 93       	push	r17
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	80 91 03 02 	lds	r24, 0x0203
    1a06:	81 11       	cpse	r24, r1
    1a08:	a4 c0       	rjmp	.+328    	; 0x1b52 <xTaskIncrementTick+0x164>
    1a0a:	80 91 0e 02 	lds	r24, 0x020E
    1a0e:	90 91 0f 02 	lds	r25, 0x020F
    1a12:	a0 91 10 02 	lds	r26, 0x0210
    1a16:	b0 91 11 02 	lds	r27, 0x0211
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	a1 1d       	adc	r26, r1
    1a1e:	b1 1d       	adc	r27, r1
    1a20:	80 93 0e 02 	sts	0x020E, r24
    1a24:	90 93 0f 02 	sts	0x020F, r25
    1a28:	a0 93 10 02 	sts	0x0210, r26
    1a2c:	b0 93 11 02 	sts	0x0211, r27
    1a30:	c0 90 0e 02 	lds	r12, 0x020E
    1a34:	d0 90 0f 02 	lds	r13, 0x020F
    1a38:	e0 90 10 02 	lds	r14, 0x0210
    1a3c:	f0 90 11 02 	lds	r15, 0x0211
    1a40:	c1 14       	cp	r12, r1
    1a42:	d1 04       	cpc	r13, r1
    1a44:	e1 04       	cpc	r14, r1
    1a46:	f1 04       	cpc	r15, r1
    1a48:	b1 f4       	brne	.+44     	; 0x1a76 <xTaskIncrementTick+0x88>
    1a4a:	80 91 2c 02 	lds	r24, 0x022C
    1a4e:	90 91 2d 02 	lds	r25, 0x022D
    1a52:	20 91 2a 02 	lds	r18, 0x022A
    1a56:	30 91 2b 02 	lds	r19, 0x022B
    1a5a:	30 93 2d 02 	sts	0x022D, r19
    1a5e:	20 93 2c 02 	sts	0x022C, r18
    1a62:	90 93 2b 02 	sts	0x022B, r25
    1a66:	80 93 2a 02 	sts	0x022A, r24
    1a6a:	80 91 09 02 	lds	r24, 0x0209
    1a6e:	8f 5f       	subi	r24, 0xFF	; 255
    1a70:	80 93 09 02 	sts	0x0209, r24
    1a74:	61 de       	rcall	.-830    	; 0x1738 <prvResetNextTaskUnblockTime>
    1a76:	80 91 04 02 	lds	r24, 0x0204
    1a7a:	90 91 05 02 	lds	r25, 0x0205
    1a7e:	a0 91 06 02 	lds	r26, 0x0206
    1a82:	b0 91 07 02 	lds	r27, 0x0207
    1a86:	b1 2c       	mov	r11, r1
    1a88:	c8 16       	cp	r12, r24
    1a8a:	d9 06       	cpc	r13, r25
    1a8c:	ea 06       	cpc	r14, r26
    1a8e:	fb 06       	cpc	r15, r27
    1a90:	08 f4       	brcc	.+2      	; 0x1a94 <xTaskIncrementTick+0xa6>
    1a92:	4e c0       	rjmp	.+156    	; 0x1b30 <xTaskIncrementTick+0x142>
    1a94:	9b e0       	ldi	r25, 0x0B	; 11
    1a96:	a9 2e       	mov	r10, r25
    1a98:	e0 91 2c 02 	lds	r30, 0x022C
    1a9c:	f0 91 2d 02 	lds	r31, 0x022D
    1aa0:	80 81       	ld	r24, Z
    1aa2:	81 11       	cpse	r24, r1
    1aa4:	04 c0       	rjmp	.+8      	; 0x1aae <xTaskIncrementTick+0xc0>
    1aa6:	4f ef       	ldi	r20, 0xFF	; 255
    1aa8:	5f ef       	ldi	r21, 0xFF	; 255
    1aaa:	ba 01       	movw	r22, r20
    1aac:	12 c0       	rjmp	.+36     	; 0x1ad2 <xTaskIncrementTick+0xe4>
    1aae:	e0 91 2c 02 	lds	r30, 0x022C
    1ab2:	f0 91 2d 02 	lds	r31, 0x022D
    1ab6:	07 80       	ldd	r0, Z+7	; 0x07
    1ab8:	f0 85       	ldd	r31, Z+8	; 0x08
    1aba:	e0 2d       	mov	r30, r0
    1abc:	c0 85       	ldd	r28, Z+8	; 0x08
    1abe:	d1 85       	ldd	r29, Z+9	; 0x09
    1ac0:	4a 81       	ldd	r20, Y+2	; 0x02
    1ac2:	5b 81       	ldd	r21, Y+3	; 0x03
    1ac4:	6c 81       	ldd	r22, Y+4	; 0x04
    1ac6:	7d 81       	ldd	r23, Y+5	; 0x05
    1ac8:	c4 16       	cp	r12, r20
    1aca:	d5 06       	cpc	r13, r21
    1acc:	e6 06       	cpc	r14, r22
    1ace:	f7 06       	cpc	r15, r23
    1ad0:	48 f4       	brcc	.+18     	; 0x1ae4 <xTaskIncrementTick+0xf6>
    1ad2:	40 93 04 02 	sts	0x0204, r20
    1ad6:	50 93 05 02 	sts	0x0205, r21
    1ada:	60 93 06 02 	sts	0x0206, r22
    1ade:	70 93 07 02 	sts	0x0207, r23
    1ae2:	26 c0       	rjmp	.+76     	; 0x1b30 <xTaskIncrementTick+0x142>
    1ae4:	8e 01       	movw	r16, r28
    1ae6:	0e 5f       	subi	r16, 0xFE	; 254
    1ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aea:	c8 01       	movw	r24, r16
    1aec:	6e d3       	rcall	.+1756   	; 0x21ca <uxListRemove>
    1aee:	88 8d       	ldd	r24, Y+24	; 0x18
    1af0:	99 8d       	ldd	r25, Y+25	; 0x19
    1af2:	89 2b       	or	r24, r25
    1af4:	19 f0       	breq	.+6      	; 0x1afc <xTaskIncrementTick+0x10e>
    1af6:	ce 01       	movw	r24, r28
    1af8:	0e 96       	adiw	r24, 0x0e	; 14
    1afa:	67 d3       	rcall	.+1742   	; 0x21ca <uxListRemove>
    1afc:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1afe:	80 91 0d 02 	lds	r24, 0x020D
    1b02:	82 17       	cp	r24, r18
    1b04:	10 f4       	brcc	.+4      	; 0x1b0a <xTaskIncrementTick+0x11c>
    1b06:	20 93 0d 02 	sts	0x020D, r18
    1b0a:	a2 9e       	mul	r10, r18
    1b0c:	c0 01       	movw	r24, r0
    1b0e:	11 24       	eor	r1, r1
    1b10:	b8 01       	movw	r22, r16
    1b12:	8c 5b       	subi	r24, 0xBC	; 188
    1b14:	9d 4f       	sbci	r25, 0xFD	; 253
    1b16:	38 d3       	rcall	.+1648   	; 0x2188 <vListInsertEnd>
    1b18:	e0 91 b2 02 	lds	r30, 0x02B2
    1b1c:	f0 91 b3 02 	lds	r31, 0x02B3
    1b20:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b22:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b24:	98 17       	cp	r25, r24
    1b26:	08 f4       	brcc	.+2      	; 0x1b2a <xTaskIncrementTick+0x13c>
    1b28:	b7 cf       	rjmp	.-146    	; 0x1a98 <xTaskIncrementTick+0xaa>
    1b2a:	bb 24       	eor	r11, r11
    1b2c:	b3 94       	inc	r11
    1b2e:	b4 cf       	rjmp	.-152    	; 0x1a98 <xTaskIncrementTick+0xaa>
    1b30:	e0 91 b2 02 	lds	r30, 0x02B2
    1b34:	f0 91 b3 02 	lds	r31, 0x02B3
    1b38:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1b3a:	8b e0       	ldi	r24, 0x0B	; 11
    1b3c:	e8 9f       	mul	r30, r24
    1b3e:	f0 01       	movw	r30, r0
    1b40:	11 24       	eor	r1, r1
    1b42:	ec 5b       	subi	r30, 0xBC	; 188
    1b44:	fd 4f       	sbci	r31, 0xFD	; 253
    1b46:	80 81       	ld	r24, Z
    1b48:	82 30       	cpi	r24, 0x02	; 2
    1b4a:	48 f0       	brcs	.+18     	; 0x1b5e <xTaskIncrementTick+0x170>
    1b4c:	bb 24       	eor	r11, r11
    1b4e:	b3 94       	inc	r11
    1b50:	06 c0       	rjmp	.+12     	; 0x1b5e <xTaskIncrementTick+0x170>
    1b52:	80 91 0b 02 	lds	r24, 0x020B
    1b56:	8f 5f       	subi	r24, 0xFF	; 255
    1b58:	80 93 0b 02 	sts	0x020B, r24
    1b5c:	b1 2c       	mov	r11, r1
    1b5e:	80 91 0a 02 	lds	r24, 0x020A
    1b62:	88 23       	and	r24, r24
    1b64:	11 f0       	breq	.+4      	; 0x1b6a <xTaskIncrementTick+0x17c>
    1b66:	bb 24       	eor	r11, r11
    1b68:	b3 94       	inc	r11
    1b6a:	8b 2d       	mov	r24, r11
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	1f 91       	pop	r17
    1b72:	0f 91       	pop	r16
    1b74:	ff 90       	pop	r15
    1b76:	ef 90       	pop	r14
    1b78:	df 90       	pop	r13
    1b7a:	cf 90       	pop	r12
    1b7c:	bf 90       	pop	r11
    1b7e:	af 90       	pop	r10
    1b80:	08 95       	ret

00001b82 <xTaskResumeAll>:
    1b82:	ef 92       	push	r14
    1b84:	ff 92       	push	r15
    1b86:	0f 93       	push	r16
    1b88:	1f 93       	push	r17
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	0f 92       	push	r0
    1b94:	80 91 03 02 	lds	r24, 0x0203
    1b98:	81 50       	subi	r24, 0x01	; 1
    1b9a:	80 93 03 02 	sts	0x0203, r24
    1b9e:	80 91 03 02 	lds	r24, 0x0203
    1ba2:	88 23       	and	r24, r24
    1ba4:	11 f0       	breq	.+4      	; 0x1baa <xTaskResumeAll+0x28>
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	4e c0       	rjmp	.+156    	; 0x1c46 <xTaskResumeAll+0xc4>
    1baa:	80 91 12 02 	lds	r24, 0x0212
    1bae:	88 23       	and	r24, r24
    1bb0:	d1 f3       	breq	.-12     	; 0x1ba6 <xTaskResumeAll+0x24>
    1bb2:	2b e0       	ldi	r18, 0x0B	; 11
    1bb4:	f2 2e       	mov	r15, r18
    1bb6:	ee 24       	eor	r14, r14
    1bb8:	e3 94       	inc	r14
    1bba:	80 91 1f 02 	lds	r24, 0x021F
    1bbe:	88 23       	and	r24, r24
    1bc0:	39 f1       	breq	.+78     	; 0x1c10 <xTaskResumeAll+0x8e>
    1bc2:	e0 91 26 02 	lds	r30, 0x0226
    1bc6:	f0 91 27 02 	lds	r31, 0x0227
    1bca:	c0 85       	ldd	r28, Z+8	; 0x08
    1bcc:	d1 85       	ldd	r29, Z+9	; 0x09
    1bce:	ce 01       	movw	r24, r28
    1bd0:	0e 96       	adiw	r24, 0x0e	; 14
    1bd2:	fb d2       	rcall	.+1526   	; 0x21ca <uxListRemove>
    1bd4:	8e 01       	movw	r16, r28
    1bd6:	0e 5f       	subi	r16, 0xFE	; 254
    1bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bda:	c8 01       	movw	r24, r16
    1bdc:	f6 d2       	rcall	.+1516   	; 0x21ca <uxListRemove>
    1bde:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1be0:	90 91 0d 02 	lds	r25, 0x020D
    1be4:	98 17       	cp	r25, r24
    1be6:	10 f4       	brcc	.+4      	; 0x1bec <xTaskResumeAll+0x6a>
    1be8:	80 93 0d 02 	sts	0x020D, r24
    1bec:	f8 9e       	mul	r15, r24
    1bee:	c0 01       	movw	r24, r0
    1bf0:	11 24       	eor	r1, r1
    1bf2:	b8 01       	movw	r22, r16
    1bf4:	8c 5b       	subi	r24, 0xBC	; 188
    1bf6:	9d 4f       	sbci	r25, 0xFD	; 253
    1bf8:	c7 d2       	rcall	.+1422   	; 0x2188 <vListInsertEnd>
    1bfa:	e0 91 b2 02 	lds	r30, 0x02B2
    1bfe:	f0 91 b3 02 	lds	r31, 0x02B3
    1c02:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c04:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c06:	98 17       	cp	r25, r24
    1c08:	c0 f2       	brcs	.-80     	; 0x1bba <xTaskResumeAll+0x38>
    1c0a:	e0 92 0a 02 	sts	0x020A, r14
    1c0e:	d5 cf       	rjmp	.-86     	; 0x1bba <xTaskResumeAll+0x38>
    1c10:	80 91 0b 02 	lds	r24, 0x020B
    1c14:	81 11       	cpse	r24, r1
    1c16:	08 c0       	rjmp	.+16     	; 0x1c28 <xTaskResumeAll+0xa6>
    1c18:	80 91 0a 02 	lds	r24, 0x020A
    1c1c:	81 30       	cpi	r24, 0x01	; 1
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <xTaskResumeAll+0xa0>
    1c20:	c2 cf       	rjmp	.-124    	; 0x1ba6 <xTaskResumeAll+0x24>
    1c22:	e9 d1       	rcall	.+978    	; 0x1ff6 <vPortYield>
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	0f c0       	rjmp	.+30     	; 0x1c46 <xTaskResumeAll+0xc4>
    1c28:	c1 e0       	ldi	r28, 0x01	; 1
    1c2a:	80 91 0b 02 	lds	r24, 0x020B
    1c2e:	88 23       	and	r24, r24
    1c30:	99 f3       	breq	.-26     	; 0x1c18 <xTaskResumeAll+0x96>
    1c32:	dd de       	rcall	.-582    	; 0x19ee <xTaskIncrementTick>
    1c34:	81 11       	cpse	r24, r1
    1c36:	c0 93 0a 02 	sts	0x020A, r28
    1c3a:	80 91 0b 02 	lds	r24, 0x020B
    1c3e:	81 50       	subi	r24, 0x01	; 1
    1c40:	80 93 0b 02 	sts	0x020B, r24
    1c44:	f2 cf       	rjmp	.-28     	; 0x1c2a <xTaskResumeAll+0xa8>
    1c46:	0f 90       	pop	r0
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	df 91       	pop	r29
    1c4c:	cf 91       	pop	r28
    1c4e:	1f 91       	pop	r17
    1c50:	0f 91       	pop	r16
    1c52:	ff 90       	pop	r15
    1c54:	ef 90       	pop	r14
    1c56:	08 95       	ret

00001c58 <prvIdleTask>:
    1c58:	80 91 13 02 	lds	r24, 0x0213
    1c5c:	88 23       	and	r24, r24
    1c5e:	21 f1       	breq	.+72     	; 0x1ca8 <prvIdleTask+0x50>
    1c60:	c0 de       	rcall	.-640    	; 0x19e2 <vTaskSuspendAll>
    1c62:	c0 91 14 02 	lds	r28, 0x0214
    1c66:	8d df       	rcall	.-230    	; 0x1b82 <xTaskResumeAll>
    1c68:	cc 23       	and	r28, r28
    1c6a:	b1 f3       	breq	.-20     	; 0x1c58 <prvIdleTask>
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	f8 94       	cli
    1c70:	0f 92       	push	r0
    1c72:	e0 91 1b 02 	lds	r30, 0x021B
    1c76:	f0 91 1c 02 	lds	r31, 0x021C
    1c7a:	c0 85       	ldd	r28, Z+8	; 0x08
    1c7c:	d1 85       	ldd	r29, Z+9	; 0x09
    1c7e:	ce 01       	movw	r24, r28
    1c80:	02 96       	adiw	r24, 0x02	; 2
    1c82:	a3 d2       	rcall	.+1350   	; 0x21ca <uxListRemove>
    1c84:	80 91 12 02 	lds	r24, 0x0212
    1c88:	81 50       	subi	r24, 0x01	; 1
    1c8a:	80 93 12 02 	sts	0x0212, r24
    1c8e:	80 91 13 02 	lds	r24, 0x0213
    1c92:	81 50       	subi	r24, 0x01	; 1
    1c94:	80 93 13 02 	sts	0x0213, r24
    1c98:	0f 90       	pop	r0
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ca0:	d9 d0       	rcall	.+434    	; 0x1e54 <vPortFree>
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	d7 d0       	rcall	.+430    	; 0x1e54 <vPortFree>
    1ca6:	d8 cf       	rjmp	.-80     	; 0x1c58 <prvIdleTask>
    1ca8:	80 91 44 02 	lds	r24, 0x0244
    1cac:	82 30       	cpi	r24, 0x02	; 2
    1cae:	a0 f2       	brcs	.-88     	; 0x1c58 <prvIdleTask>
    1cb0:	a2 d1       	rcall	.+836    	; 0x1ff6 <vPortYield>
    1cb2:	d2 cf       	rjmp	.-92     	; 0x1c58 <prvIdleTask>

00001cb4 <vTaskSwitchContext>:
    1cb4:	80 91 03 02 	lds	r24, 0x0203
    1cb8:	88 23       	and	r24, r24
    1cba:	21 f0       	breq	.+8      	; 0x1cc4 <vTaskSwitchContext+0x10>
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	80 93 0a 02 	sts	0x020A, r24
    1cc2:	08 95       	ret
    1cc4:	10 92 0a 02 	sts	0x020A, r1
    1cc8:	9b e0       	ldi	r25, 0x0B	; 11
    1cca:	e0 91 0d 02 	lds	r30, 0x020D
    1cce:	9e 9f       	mul	r25, r30
    1cd0:	f0 01       	movw	r30, r0
    1cd2:	11 24       	eor	r1, r1
    1cd4:	ec 5b       	subi	r30, 0xBC	; 188
    1cd6:	fd 4f       	sbci	r31, 0xFD	; 253
    1cd8:	80 81       	ld	r24, Z
    1cda:	81 11       	cpse	r24, r1
    1cdc:	06 c0       	rjmp	.+12     	; 0x1cea <vTaskSwitchContext+0x36>
    1cde:	80 91 0d 02 	lds	r24, 0x020D
    1ce2:	81 50       	subi	r24, 0x01	; 1
    1ce4:	80 93 0d 02 	sts	0x020D, r24
    1ce8:	f0 cf       	rjmp	.-32     	; 0x1cca <vTaskSwitchContext+0x16>
    1cea:	e0 91 0d 02 	lds	r30, 0x020D
    1cee:	8b e0       	ldi	r24, 0x0B	; 11
    1cf0:	e8 9f       	mul	r30, r24
    1cf2:	f0 01       	movw	r30, r0
    1cf4:	11 24       	eor	r1, r1
    1cf6:	ec 5b       	subi	r30, 0xBC	; 188
    1cf8:	fd 4f       	sbci	r31, 0xFD	; 253
    1cfa:	a1 81       	ldd	r26, Z+1	; 0x01
    1cfc:	b2 81       	ldd	r27, Z+2	; 0x02
    1cfe:	14 96       	adiw	r26, 0x04	; 4
    1d00:	0d 90       	ld	r0, X+
    1d02:	bc 91       	ld	r27, X
    1d04:	a0 2d       	mov	r26, r0
    1d06:	b2 83       	std	Z+2, r27	; 0x02
    1d08:	a1 83       	std	Z+1, r26	; 0x01
    1d0a:	cf 01       	movw	r24, r30
    1d0c:	03 96       	adiw	r24, 0x03	; 3
    1d0e:	a8 17       	cp	r26, r24
    1d10:	b9 07       	cpc	r27, r25
    1d12:	31 f4       	brne	.+12     	; 0x1d20 <vTaskSwitchContext+0x6c>
    1d14:	14 96       	adiw	r26, 0x04	; 4
    1d16:	8d 91       	ld	r24, X+
    1d18:	9c 91       	ld	r25, X
    1d1a:	15 97       	sbiw	r26, 0x05	; 5
    1d1c:	92 83       	std	Z+2, r25	; 0x02
    1d1e:	81 83       	std	Z+1, r24	; 0x01
    1d20:	01 80       	ldd	r0, Z+1	; 0x01
    1d22:	f2 81       	ldd	r31, Z+2	; 0x02
    1d24:	e0 2d       	mov	r30, r0
    1d26:	80 85       	ldd	r24, Z+8	; 0x08
    1d28:	91 85       	ldd	r25, Z+9	; 0x09
    1d2a:	90 93 b3 02 	sts	0x02B3, r25
    1d2e:	80 93 b2 02 	sts	0x02B2, r24
    1d32:	08 95       	ret

00001d34 <pvPortMalloc>:
    1d34:	0f 93       	push	r16
    1d36:	1f 93       	push	r17
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	ec 01       	movw	r28, r24
    1d3e:	51 de       	rcall	.-862    	; 0x19e2 <vTaskSuspendAll>
    1d40:	80 91 b4 02 	lds	r24, 0x02B4
    1d44:	81 11       	cpse	r24, r1
    1d46:	21 c0       	rjmp	.+66     	; 0x1d8a <pvPortMalloc+0x56>
    1d48:	8e eb       	ldi	r24, 0xBE	; 190
    1d4a:	92 e0       	ldi	r25, 0x02	; 2
    1d4c:	90 93 ba 02 	sts	0x02BA, r25
    1d50:	80 93 b9 02 	sts	0x02B9, r24
    1d54:	10 92 bc 02 	sts	0x02BC, r1
    1d58:	10 92 bb 02 	sts	0x02BB, r1
    1d5c:	8b ed       	ldi	r24, 0xDB	; 219
    1d5e:	95 e0       	ldi	r25, 0x05	; 5
    1d60:	90 93 b8 02 	sts	0x02B8, r25
    1d64:	80 93 b7 02 	sts	0x02B7, r24
    1d68:	10 92 b6 02 	sts	0x02B6, r1
    1d6c:	10 92 b5 02 	sts	0x02B5, r1
    1d70:	90 93 c1 02 	sts	0x02C1, r25
    1d74:	80 93 c0 02 	sts	0x02C0, r24
    1d78:	85 eb       	ldi	r24, 0xB5	; 181
    1d7a:	92 e0       	ldi	r25, 0x02	; 2
    1d7c:	90 93 bf 02 	sts	0x02BF, r25
    1d80:	80 93 be 02 	sts	0x02BE, r24
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	80 93 b4 02 	sts	0x02B4, r24
    1d8a:	20 97       	sbiw	r28, 0x00	; 0
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <pvPortMalloc+0x5c>
    1d8e:	24 96       	adiw	r28, 0x04	; 4
    1d90:	ce 01       	movw	r24, r28
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	8a 3d       	cpi	r24, 0xDA	; 218
    1d96:	95 40       	sbci	r25, 0x05	; 5
    1d98:	08 f0       	brcs	.+2      	; 0x1d9c <pvPortMalloc+0x68>
    1d9a:	53 c0       	rjmp	.+166    	; 0x1e42 <pvPortMalloc+0x10e>
    1d9c:	e0 91 b9 02 	lds	r30, 0x02B9
    1da0:	f0 91 ba 02 	lds	r31, 0x02BA
    1da4:	a9 eb       	ldi	r26, 0xB9	; 185
    1da6:	b2 e0       	ldi	r27, 0x02	; 2
    1da8:	82 81       	ldd	r24, Z+2	; 0x02
    1daa:	93 81       	ldd	r25, Z+3	; 0x03
    1dac:	8c 17       	cp	r24, r28
    1dae:	9d 07       	cpc	r25, r29
    1db0:	28 f0       	brcs	.+10     	; 0x1dbc <pvPortMalloc+0x88>
    1db2:	22 e0       	ldi	r18, 0x02	; 2
    1db4:	e5 3b       	cpi	r30, 0xB5	; 181
    1db6:	f2 07       	cpc	r31, r18
    1db8:	49 f4       	brne	.+18     	; 0x1dcc <pvPortMalloc+0x98>
    1dba:	43 c0       	rjmp	.+134    	; 0x1e42 <pvPortMalloc+0x10e>
    1dbc:	20 81       	ld	r18, Z
    1dbe:	31 81       	ldd	r19, Z+1	; 0x01
    1dc0:	21 15       	cp	r18, r1
    1dc2:	31 05       	cpc	r19, r1
    1dc4:	b1 f3       	breq	.-20     	; 0x1db2 <pvPortMalloc+0x7e>
    1dc6:	df 01       	movw	r26, r30
    1dc8:	f9 01       	movw	r30, r18
    1dca:	ee cf       	rjmp	.-36     	; 0x1da8 <pvPortMalloc+0x74>
    1dcc:	0d 91       	ld	r16, X+
    1dce:	1c 91       	ld	r17, X
    1dd0:	11 97       	sbiw	r26, 0x01	; 1
    1dd2:	0c 5f       	subi	r16, 0xFC	; 252
    1dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd6:	20 81       	ld	r18, Z
    1dd8:	31 81       	ldd	r19, Z+1	; 0x01
    1dda:	2d 93       	st	X+, r18
    1ddc:	3c 93       	st	X, r19
    1dde:	8c 1b       	sub	r24, r28
    1de0:	9d 0b       	sbc	r25, r29
    1de2:	89 30       	cpi	r24, 0x09	; 9
    1de4:	91 05       	cpc	r25, r1
    1de6:	00 f1       	brcs	.+64     	; 0x1e28 <pvPortMalloc+0xf4>
    1de8:	df 01       	movw	r26, r30
    1dea:	ac 0f       	add	r26, r28
    1dec:	bd 1f       	adc	r27, r29
    1dee:	13 96       	adiw	r26, 0x03	; 3
    1df0:	9c 93       	st	X, r25
    1df2:	8e 93       	st	-X, r24
    1df4:	12 97       	sbiw	r26, 0x02	; 2
    1df6:	d3 83       	std	Z+3, r29	; 0x03
    1df8:	c2 83       	std	Z+2, r28	; 0x02
    1dfa:	12 96       	adiw	r26, 0x02	; 2
    1dfc:	2d 91       	ld	r18, X+
    1dfe:	3c 91       	ld	r19, X
    1e00:	13 97       	sbiw	r26, 0x03	; 3
    1e02:	69 eb       	ldi	r22, 0xB9	; 185
    1e04:	72 e0       	ldi	r23, 0x02	; 2
    1e06:	eb 01       	movw	r28, r22
    1e08:	88 81       	ld	r24, Y
    1e0a:	99 81       	ldd	r25, Y+1	; 0x01
    1e0c:	ec 01       	movw	r28, r24
    1e0e:	4a 81       	ldd	r20, Y+2	; 0x02
    1e10:	5b 81       	ldd	r21, Y+3	; 0x03
    1e12:	42 17       	cp	r20, r18
    1e14:	53 07       	cpc	r21, r19
    1e16:	10 f4       	brcc	.+4      	; 0x1e1c <pvPortMalloc+0xe8>
    1e18:	bc 01       	movw	r22, r24
    1e1a:	f5 cf       	rjmp	.-22     	; 0x1e06 <pvPortMalloc+0xd2>
    1e1c:	11 96       	adiw	r26, 0x01	; 1
    1e1e:	9c 93       	st	X, r25
    1e20:	8e 93       	st	-X, r24
    1e22:	eb 01       	movw	r28, r22
    1e24:	b9 83       	std	Y+1, r27	; 0x01
    1e26:	a8 83       	st	Y, r26
    1e28:	80 91 0f 01 	lds	r24, 0x010F
    1e2c:	90 91 10 01 	lds	r25, 0x0110
    1e30:	22 81       	ldd	r18, Z+2	; 0x02
    1e32:	33 81       	ldd	r19, Z+3	; 0x03
    1e34:	82 1b       	sub	r24, r18
    1e36:	93 0b       	sbc	r25, r19
    1e38:	90 93 10 01 	sts	0x0110, r25
    1e3c:	80 93 0f 01 	sts	0x010F, r24
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <pvPortMalloc+0x112>
    1e42:	00 e0       	ldi	r16, 0x00	; 0
    1e44:	10 e0       	ldi	r17, 0x00	; 0
    1e46:	9d de       	rcall	.-710    	; 0x1b82 <xTaskResumeAll>
    1e48:	c8 01       	movw	r24, r16
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	1f 91       	pop	r17
    1e50:	0f 91       	pop	r16
    1e52:	08 95       	ret

00001e54 <vPortFree>:
    1e54:	cf 93       	push	r28
    1e56:	df 93       	push	r29
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	19 f1       	breq	.+70     	; 0x1ea2 <vPortFree+0x4e>
    1e5c:	ec 01       	movw	r28, r24
    1e5e:	24 97       	sbiw	r28, 0x04	; 4
    1e60:	c0 dd       	rcall	.-1152   	; 0x19e2 <vTaskSuspendAll>
    1e62:	2a 81       	ldd	r18, Y+2	; 0x02
    1e64:	3b 81       	ldd	r19, Y+3	; 0x03
    1e66:	e9 eb       	ldi	r30, 0xB9	; 185
    1e68:	f2 e0       	ldi	r31, 0x02	; 2
    1e6a:	a0 81       	ld	r26, Z
    1e6c:	b1 81       	ldd	r27, Z+1	; 0x01
    1e6e:	12 96       	adiw	r26, 0x02	; 2
    1e70:	8d 91       	ld	r24, X+
    1e72:	9c 91       	ld	r25, X
    1e74:	13 97       	sbiw	r26, 0x03	; 3
    1e76:	82 17       	cp	r24, r18
    1e78:	93 07       	cpc	r25, r19
    1e7a:	10 f4       	brcc	.+4      	; 0x1e80 <vPortFree+0x2c>
    1e7c:	fd 01       	movw	r30, r26
    1e7e:	f5 cf       	rjmp	.-22     	; 0x1e6a <vPortFree+0x16>
    1e80:	b9 83       	std	Y+1, r27	; 0x01
    1e82:	a8 83       	st	Y, r26
    1e84:	d1 83       	std	Z+1, r29	; 0x01
    1e86:	c0 83       	st	Z, r28
    1e88:	80 91 0f 01 	lds	r24, 0x010F
    1e8c:	90 91 10 01 	lds	r25, 0x0110
    1e90:	82 0f       	add	r24, r18
    1e92:	93 1f       	adc	r25, r19
    1e94:	90 93 10 01 	sts	0x0110, r25
    1e98:	80 93 0f 01 	sts	0x010F, r24
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	70 ce       	rjmp	.-800    	; 0x1b82 <xTaskResumeAll>
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	08 95       	ret

00001ea8 <pxPortInitialiseStack>:
    1ea8:	31 e1       	ldi	r19, 0x11	; 17
    1eaa:	fc 01       	movw	r30, r24
    1eac:	30 83       	st	Z, r19
    1eae:	31 97       	sbiw	r30, 0x01	; 1
    1eb0:	22 e2       	ldi	r18, 0x22	; 34
    1eb2:	20 83       	st	Z, r18
    1eb4:	31 97       	sbiw	r30, 0x01	; 1
    1eb6:	a3 e3       	ldi	r26, 0x33	; 51
    1eb8:	a0 83       	st	Z, r26
    1eba:	31 97       	sbiw	r30, 0x01	; 1
    1ebc:	60 83       	st	Z, r22
    1ebe:	31 97       	sbiw	r30, 0x01	; 1
    1ec0:	70 83       	st	Z, r23
    1ec2:	31 97       	sbiw	r30, 0x01	; 1
    1ec4:	10 82       	st	Z, r1
    1ec6:	31 97       	sbiw	r30, 0x01	; 1
    1ec8:	60 e8       	ldi	r22, 0x80	; 128
    1eca:	60 83       	st	Z, r22
    1ecc:	31 97       	sbiw	r30, 0x01	; 1
    1ece:	10 82       	st	Z, r1
    1ed0:	31 97       	sbiw	r30, 0x01	; 1
    1ed2:	62 e0       	ldi	r22, 0x02	; 2
    1ed4:	60 83       	st	Z, r22
    1ed6:	31 97       	sbiw	r30, 0x01	; 1
    1ed8:	63 e0       	ldi	r22, 0x03	; 3
    1eda:	60 83       	st	Z, r22
    1edc:	31 97       	sbiw	r30, 0x01	; 1
    1ede:	64 e0       	ldi	r22, 0x04	; 4
    1ee0:	60 83       	st	Z, r22
    1ee2:	31 97       	sbiw	r30, 0x01	; 1
    1ee4:	65 e0       	ldi	r22, 0x05	; 5
    1ee6:	60 83       	st	Z, r22
    1ee8:	31 97       	sbiw	r30, 0x01	; 1
    1eea:	66 e0       	ldi	r22, 0x06	; 6
    1eec:	60 83       	st	Z, r22
    1eee:	31 97       	sbiw	r30, 0x01	; 1
    1ef0:	67 e0       	ldi	r22, 0x07	; 7
    1ef2:	60 83       	st	Z, r22
    1ef4:	31 97       	sbiw	r30, 0x01	; 1
    1ef6:	68 e0       	ldi	r22, 0x08	; 8
    1ef8:	60 83       	st	Z, r22
    1efa:	31 97       	sbiw	r30, 0x01	; 1
    1efc:	69 e0       	ldi	r22, 0x09	; 9
    1efe:	60 83       	st	Z, r22
    1f00:	31 97       	sbiw	r30, 0x01	; 1
    1f02:	60 e1       	ldi	r22, 0x10	; 16
    1f04:	60 83       	st	Z, r22
    1f06:	31 97       	sbiw	r30, 0x01	; 1
    1f08:	30 83       	st	Z, r19
    1f0a:	31 97       	sbiw	r30, 0x01	; 1
    1f0c:	32 e1       	ldi	r19, 0x12	; 18
    1f0e:	30 83       	st	Z, r19
    1f10:	31 97       	sbiw	r30, 0x01	; 1
    1f12:	33 e1       	ldi	r19, 0x13	; 19
    1f14:	30 83       	st	Z, r19
    1f16:	31 97       	sbiw	r30, 0x01	; 1
    1f18:	34 e1       	ldi	r19, 0x14	; 20
    1f1a:	30 83       	st	Z, r19
    1f1c:	31 97       	sbiw	r30, 0x01	; 1
    1f1e:	35 e1       	ldi	r19, 0x15	; 21
    1f20:	30 83       	st	Z, r19
    1f22:	31 97       	sbiw	r30, 0x01	; 1
    1f24:	36 e1       	ldi	r19, 0x16	; 22
    1f26:	30 83       	st	Z, r19
    1f28:	31 97       	sbiw	r30, 0x01	; 1
    1f2a:	37 e1       	ldi	r19, 0x17	; 23
    1f2c:	30 83       	st	Z, r19
    1f2e:	31 97       	sbiw	r30, 0x01	; 1
    1f30:	38 e1       	ldi	r19, 0x18	; 24
    1f32:	30 83       	st	Z, r19
    1f34:	31 97       	sbiw	r30, 0x01	; 1
    1f36:	39 e1       	ldi	r19, 0x19	; 25
    1f38:	30 83       	st	Z, r19
    1f3a:	31 97       	sbiw	r30, 0x01	; 1
    1f3c:	30 e2       	ldi	r19, 0x20	; 32
    1f3e:	30 83       	st	Z, r19
    1f40:	31 97       	sbiw	r30, 0x01	; 1
    1f42:	31 e2       	ldi	r19, 0x21	; 33
    1f44:	30 83       	st	Z, r19
    1f46:	31 97       	sbiw	r30, 0x01	; 1
    1f48:	20 83       	st	Z, r18
    1f4a:	31 97       	sbiw	r30, 0x01	; 1
    1f4c:	23 e2       	ldi	r18, 0x23	; 35
    1f4e:	20 83       	st	Z, r18
    1f50:	31 97       	sbiw	r30, 0x01	; 1
    1f52:	40 83       	st	Z, r20
    1f54:	31 97       	sbiw	r30, 0x01	; 1
    1f56:	50 83       	st	Z, r21
    1f58:	31 97       	sbiw	r30, 0x01	; 1
    1f5a:	26 e2       	ldi	r18, 0x26	; 38
    1f5c:	20 83       	st	Z, r18
    1f5e:	31 97       	sbiw	r30, 0x01	; 1
    1f60:	27 e2       	ldi	r18, 0x27	; 39
    1f62:	20 83       	st	Z, r18
    1f64:	31 97       	sbiw	r30, 0x01	; 1
    1f66:	28 e2       	ldi	r18, 0x28	; 40
    1f68:	20 83       	st	Z, r18
    1f6a:	31 97       	sbiw	r30, 0x01	; 1
    1f6c:	29 e2       	ldi	r18, 0x29	; 41
    1f6e:	20 83       	st	Z, r18
    1f70:	31 97       	sbiw	r30, 0x01	; 1
    1f72:	20 e3       	ldi	r18, 0x30	; 48
    1f74:	20 83       	st	Z, r18
    1f76:	31 97       	sbiw	r30, 0x01	; 1
    1f78:	21 e3       	ldi	r18, 0x31	; 49
    1f7a:	20 83       	st	Z, r18
    1f7c:	86 97       	sbiw	r24, 0x26	; 38
    1f7e:	08 95       	ret

00001f80 <xPortStartScheduler>:
    1f80:	89 e0       	ldi	r24, 0x09	; 9
    1f82:	80 93 89 00 	sts	0x0089, r24
    1f86:	83 ec       	ldi	r24, 0xC3	; 195
    1f88:	80 93 88 00 	sts	0x0088, r24
    1f8c:	8b e0       	ldi	r24, 0x0B	; 11
    1f8e:	80 93 81 00 	sts	0x0081, r24
    1f92:	ef e6       	ldi	r30, 0x6F	; 111
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	82 60       	ori	r24, 0x02	; 2
    1f9a:	80 83       	st	Z, r24
    1f9c:	a0 91 b2 02 	lds	r26, 0x02B2
    1fa0:	b0 91 b3 02 	lds	r27, 0x02B3
    1fa4:	cd 91       	ld	r28, X+
    1fa6:	cd bf       	out	0x3d, r28	; 61
    1fa8:	dd 91       	ld	r29, X+
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	ff 91       	pop	r31
    1fae:	ef 91       	pop	r30
    1fb0:	df 91       	pop	r29
    1fb2:	cf 91       	pop	r28
    1fb4:	bf 91       	pop	r27
    1fb6:	af 91       	pop	r26
    1fb8:	9f 91       	pop	r25
    1fba:	8f 91       	pop	r24
    1fbc:	7f 91       	pop	r23
    1fbe:	6f 91       	pop	r22
    1fc0:	5f 91       	pop	r21
    1fc2:	4f 91       	pop	r20
    1fc4:	3f 91       	pop	r19
    1fc6:	2f 91       	pop	r18
    1fc8:	1f 91       	pop	r17
    1fca:	0f 91       	pop	r16
    1fcc:	ff 90       	pop	r15
    1fce:	ef 90       	pop	r14
    1fd0:	df 90       	pop	r13
    1fd2:	cf 90       	pop	r12
    1fd4:	bf 90       	pop	r11
    1fd6:	af 90       	pop	r10
    1fd8:	9f 90       	pop	r9
    1fda:	8f 90       	pop	r8
    1fdc:	7f 90       	pop	r7
    1fde:	6f 90       	pop	r6
    1fe0:	5f 90       	pop	r5
    1fe2:	4f 90       	pop	r4
    1fe4:	3f 90       	pop	r3
    1fe6:	2f 90       	pop	r2
    1fe8:	1f 90       	pop	r1
    1fea:	0f 90       	pop	r0
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	0f 90       	pop	r0
    1ff0:	08 95       	ret
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	08 95       	ret

00001ff6 <vPortYield>:
    1ff6:	0f 92       	push	r0
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	0f 92       	push	r0
    1ffe:	1f 92       	push	r1
    2000:	11 24       	eor	r1, r1
    2002:	2f 92       	push	r2
    2004:	3f 92       	push	r3
    2006:	4f 92       	push	r4
    2008:	5f 92       	push	r5
    200a:	6f 92       	push	r6
    200c:	7f 92       	push	r7
    200e:	8f 92       	push	r8
    2010:	9f 92       	push	r9
    2012:	af 92       	push	r10
    2014:	bf 92       	push	r11
    2016:	cf 92       	push	r12
    2018:	df 92       	push	r13
    201a:	ef 92       	push	r14
    201c:	ff 92       	push	r15
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	2f 93       	push	r18
    2024:	3f 93       	push	r19
    2026:	4f 93       	push	r20
    2028:	5f 93       	push	r21
    202a:	6f 93       	push	r22
    202c:	7f 93       	push	r23
    202e:	8f 93       	push	r24
    2030:	9f 93       	push	r25
    2032:	af 93       	push	r26
    2034:	bf 93       	push	r27
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	ef 93       	push	r30
    203c:	ff 93       	push	r31
    203e:	a0 91 b2 02 	lds	r26, 0x02B2
    2042:	b0 91 b3 02 	lds	r27, 0x02B3
    2046:	0d b6       	in	r0, 0x3d	; 61
    2048:	0d 92       	st	X+, r0
    204a:	0e b6       	in	r0, 0x3e	; 62
    204c:	0d 92       	st	X+, r0
    204e:	32 de       	rcall	.-924    	; 0x1cb4 <vTaskSwitchContext>
    2050:	a0 91 b2 02 	lds	r26, 0x02B2
    2054:	b0 91 b3 02 	lds	r27, 0x02B3
    2058:	cd 91       	ld	r28, X+
    205a:	cd bf       	out	0x3d, r28	; 61
    205c:	dd 91       	ld	r29, X+
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	ff 91       	pop	r31
    2062:	ef 91       	pop	r30
    2064:	df 91       	pop	r29
    2066:	cf 91       	pop	r28
    2068:	bf 91       	pop	r27
    206a:	af 91       	pop	r26
    206c:	9f 91       	pop	r25
    206e:	8f 91       	pop	r24
    2070:	7f 91       	pop	r23
    2072:	6f 91       	pop	r22
    2074:	5f 91       	pop	r21
    2076:	4f 91       	pop	r20
    2078:	3f 91       	pop	r19
    207a:	2f 91       	pop	r18
    207c:	1f 91       	pop	r17
    207e:	0f 91       	pop	r16
    2080:	ff 90       	pop	r15
    2082:	ef 90       	pop	r14
    2084:	df 90       	pop	r13
    2086:	cf 90       	pop	r12
    2088:	bf 90       	pop	r11
    208a:	af 90       	pop	r10
    208c:	9f 90       	pop	r9
    208e:	8f 90       	pop	r8
    2090:	7f 90       	pop	r7
    2092:	6f 90       	pop	r6
    2094:	5f 90       	pop	r5
    2096:	4f 90       	pop	r4
    2098:	3f 90       	pop	r3
    209a:	2f 90       	pop	r2
    209c:	1f 90       	pop	r1
    209e:	0f 90       	pop	r0
    20a0:	0f be       	out	0x3f, r0	; 63
    20a2:	0f 90       	pop	r0
    20a4:	08 95       	ret

000020a6 <vPortYieldFromTick>:
    20a6:	0f 92       	push	r0
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	0f 92       	push	r0
    20ae:	1f 92       	push	r1
    20b0:	11 24       	eor	r1, r1
    20b2:	2f 92       	push	r2
    20b4:	3f 92       	push	r3
    20b6:	4f 92       	push	r4
    20b8:	5f 92       	push	r5
    20ba:	6f 92       	push	r6
    20bc:	7f 92       	push	r7
    20be:	8f 92       	push	r8
    20c0:	9f 92       	push	r9
    20c2:	af 92       	push	r10
    20c4:	bf 92       	push	r11
    20c6:	cf 92       	push	r12
    20c8:	df 92       	push	r13
    20ca:	ef 92       	push	r14
    20cc:	ff 92       	push	r15
    20ce:	0f 93       	push	r16
    20d0:	1f 93       	push	r17
    20d2:	2f 93       	push	r18
    20d4:	3f 93       	push	r19
    20d6:	4f 93       	push	r20
    20d8:	5f 93       	push	r21
    20da:	6f 93       	push	r22
    20dc:	7f 93       	push	r23
    20de:	8f 93       	push	r24
    20e0:	9f 93       	push	r25
    20e2:	af 93       	push	r26
    20e4:	bf 93       	push	r27
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    20ea:	ef 93       	push	r30
    20ec:	ff 93       	push	r31
    20ee:	a0 91 b2 02 	lds	r26, 0x02B2
    20f2:	b0 91 b3 02 	lds	r27, 0x02B3
    20f6:	0d b6       	in	r0, 0x3d	; 61
    20f8:	0d 92       	st	X+, r0
    20fa:	0e b6       	in	r0, 0x3e	; 62
    20fc:	0d 92       	st	X+, r0
    20fe:	77 dc       	rcall	.-1810   	; 0x19ee <xTaskIncrementTick>
    2100:	81 11       	cpse	r24, r1
    2102:	d8 dd       	rcall	.-1104   	; 0x1cb4 <vTaskSwitchContext>
    2104:	a0 91 b2 02 	lds	r26, 0x02B2
    2108:	b0 91 b3 02 	lds	r27, 0x02B3
    210c:	cd 91       	ld	r28, X+
    210e:	cd bf       	out	0x3d, r28	; 61
    2110:	dd 91       	ld	r29, X+
    2112:	de bf       	out	0x3e, r29	; 62
    2114:	ff 91       	pop	r31
    2116:	ef 91       	pop	r30
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	bf 91       	pop	r27
    211e:	af 91       	pop	r26
    2120:	9f 91       	pop	r25
    2122:	8f 91       	pop	r24
    2124:	7f 91       	pop	r23
    2126:	6f 91       	pop	r22
    2128:	5f 91       	pop	r21
    212a:	4f 91       	pop	r20
    212c:	3f 91       	pop	r19
    212e:	2f 91       	pop	r18
    2130:	1f 91       	pop	r17
    2132:	0f 91       	pop	r16
    2134:	ff 90       	pop	r15
    2136:	ef 90       	pop	r14
    2138:	df 90       	pop	r13
    213a:	cf 90       	pop	r12
    213c:	bf 90       	pop	r11
    213e:	af 90       	pop	r10
    2140:	9f 90       	pop	r9
    2142:	8f 90       	pop	r8
    2144:	7f 90       	pop	r7
    2146:	6f 90       	pop	r6
    2148:	5f 90       	pop	r5
    214a:	4f 90       	pop	r4
    214c:	3f 90       	pop	r3
    214e:	2f 90       	pop	r2
    2150:	1f 90       	pop	r1
    2152:	0f 90       	pop	r0
    2154:	0f be       	out	0x3f, r0	; 63
    2156:	0f 90       	pop	r0
    2158:	08 95       	ret

0000215a <__vector_11>:
    215a:	a5 df       	rcall	.-182    	; 0x20a6 <vPortYieldFromTick>
    215c:	18 95       	reti

0000215e <vListInitialise>:
    215e:	fc 01       	movw	r30, r24
    2160:	03 96       	adiw	r24, 0x03	; 3
    2162:	92 83       	std	Z+2, r25	; 0x02
    2164:	81 83       	std	Z+1, r24	; 0x01
    2166:	4f ef       	ldi	r20, 0xFF	; 255
    2168:	5f ef       	ldi	r21, 0xFF	; 255
    216a:	ba 01       	movw	r22, r20
    216c:	43 83       	std	Z+3, r20	; 0x03
    216e:	54 83       	std	Z+4, r21	; 0x04
    2170:	65 83       	std	Z+5, r22	; 0x05
    2172:	76 83       	std	Z+6, r23	; 0x06
    2174:	90 87       	std	Z+8, r25	; 0x08
    2176:	87 83       	std	Z+7, r24	; 0x07
    2178:	92 87       	std	Z+10, r25	; 0x0a
    217a:	81 87       	std	Z+9, r24	; 0x09
    217c:	10 82       	st	Z, r1
    217e:	08 95       	ret

00002180 <vListInitialiseItem>:
    2180:	fc 01       	movw	r30, r24
    2182:	13 86       	std	Z+11, r1	; 0x0b
    2184:	12 86       	std	Z+10, r1	; 0x0a
    2186:	08 95       	ret

00002188 <vListInsertEnd>:
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	9c 01       	movw	r18, r24
    218e:	fb 01       	movw	r30, r22
    2190:	dc 01       	movw	r26, r24
    2192:	11 96       	adiw	r26, 0x01	; 1
    2194:	cd 91       	ld	r28, X+
    2196:	dc 91       	ld	r29, X
    2198:	12 97       	sbiw	r26, 0x02	; 2
    219a:	d5 83       	std	Z+5, r29	; 0x05
    219c:	c4 83       	std	Z+4, r28	; 0x04
    219e:	8e 81       	ldd	r24, Y+6	; 0x06
    21a0:	9f 81       	ldd	r25, Y+7	; 0x07
    21a2:	97 83       	std	Z+7, r25	; 0x07
    21a4:	86 83       	std	Z+6, r24	; 0x06
    21a6:	8e 81       	ldd	r24, Y+6	; 0x06
    21a8:	9f 81       	ldd	r25, Y+7	; 0x07
    21aa:	dc 01       	movw	r26, r24
    21ac:	15 96       	adiw	r26, 0x05	; 5
    21ae:	7c 93       	st	X, r23
    21b0:	6e 93       	st	-X, r22
    21b2:	14 97       	sbiw	r26, 0x04	; 4
    21b4:	7f 83       	std	Y+7, r23	; 0x07
    21b6:	6e 83       	std	Y+6, r22	; 0x06
    21b8:	33 87       	std	Z+11, r19	; 0x0b
    21ba:	22 87       	std	Z+10, r18	; 0x0a
    21bc:	f9 01       	movw	r30, r18
    21be:	80 81       	ld	r24, Z
    21c0:	8f 5f       	subi	r24, 0xFF	; 255
    21c2:	80 83       	st	Z, r24
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	08 95       	ret

000021ca <uxListRemove>:
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	fc 01       	movw	r30, r24
    21d0:	a2 85       	ldd	r26, Z+10	; 0x0a
    21d2:	b3 85       	ldd	r27, Z+11	; 0x0b
    21d4:	84 81       	ldd	r24, Z+4	; 0x04
    21d6:	95 81       	ldd	r25, Z+5	; 0x05
    21d8:	26 81       	ldd	r18, Z+6	; 0x06
    21da:	37 81       	ldd	r19, Z+7	; 0x07
    21dc:	ec 01       	movw	r28, r24
    21de:	3f 83       	std	Y+7, r19	; 0x07
    21e0:	2e 83       	std	Y+6, r18	; 0x06
    21e2:	c6 81       	ldd	r28, Z+6	; 0x06
    21e4:	d7 81       	ldd	r29, Z+7	; 0x07
    21e6:	9d 83       	std	Y+5, r25	; 0x05
    21e8:	8c 83       	std	Y+4, r24	; 0x04
    21ea:	11 96       	adiw	r26, 0x01	; 1
    21ec:	8d 91       	ld	r24, X+
    21ee:	9c 91       	ld	r25, X
    21f0:	12 97       	sbiw	r26, 0x02	; 2
    21f2:	8e 17       	cp	r24, r30
    21f4:	9f 07       	cpc	r25, r31
    21f6:	21 f4       	brne	.+8      	; 0x2200 <uxListRemove+0x36>
    21f8:	12 96       	adiw	r26, 0x02	; 2
    21fa:	dc 93       	st	X, r29
    21fc:	ce 93       	st	-X, r28
    21fe:	11 97       	sbiw	r26, 0x01	; 1
    2200:	13 86       	std	Z+11, r1	; 0x0b
    2202:	12 86       	std	Z+10, r1	; 0x0a
    2204:	8c 91       	ld	r24, X
    2206:	81 50       	subi	r24, 0x01	; 1
    2208:	8c 93       	st	X, r24
    220a:	df 91       	pop	r29
    220c:	cf 91       	pop	r28
    220e:	08 95       	ret

00002210 <__udivmodsi4>:
    2210:	a1 e2       	ldi	r26, 0x21	; 33
    2212:	1a 2e       	mov	r1, r26
    2214:	aa 1b       	sub	r26, r26
    2216:	bb 1b       	sub	r27, r27
    2218:	fd 01       	movw	r30, r26
    221a:	0d c0       	rjmp	.+26     	; 0x2236 <__udivmodsi4_ep>

0000221c <__udivmodsi4_loop>:
    221c:	aa 1f       	adc	r26, r26
    221e:	bb 1f       	adc	r27, r27
    2220:	ee 1f       	adc	r30, r30
    2222:	ff 1f       	adc	r31, r31
    2224:	a2 17       	cp	r26, r18
    2226:	b3 07       	cpc	r27, r19
    2228:	e4 07       	cpc	r30, r20
    222a:	f5 07       	cpc	r31, r21
    222c:	20 f0       	brcs	.+8      	; 0x2236 <__udivmodsi4_ep>
    222e:	a2 1b       	sub	r26, r18
    2230:	b3 0b       	sbc	r27, r19
    2232:	e4 0b       	sbc	r30, r20
    2234:	f5 0b       	sbc	r31, r21

00002236 <__udivmodsi4_ep>:
    2236:	66 1f       	adc	r22, r22
    2238:	77 1f       	adc	r23, r23
    223a:	88 1f       	adc	r24, r24
    223c:	99 1f       	adc	r25, r25
    223e:	1a 94       	dec	r1
    2240:	69 f7       	brne	.-38     	; 0x221c <__udivmodsi4_loop>
    2242:	60 95       	com	r22
    2244:	70 95       	com	r23
    2246:	80 95       	com	r24
    2248:	90 95       	com	r25
    224a:	9b 01       	movw	r18, r22
    224c:	ac 01       	movw	r20, r24
    224e:	bd 01       	movw	r22, r26
    2250:	cf 01       	movw	r24, r30
    2252:	08 95       	ret

00002254 <__tablejump2__>:
    2254:	ee 0f       	add	r30, r30
    2256:	ff 1f       	adc	r31, r31

00002258 <__tablejump__>:
    2258:	05 90       	lpm	r0, Z+
    225a:	f4 91       	lpm	r31, Z
    225c:	e0 2d       	mov	r30, r0
    225e:	09 94       	ijmp

00002260 <abort>:
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	f8 94       	cli
    2266:	09 c0       	rjmp	.+18     	; 0x227a <_exit>

00002268 <strlen>:
    2268:	fc 01       	movw	r30, r24
    226a:	01 90       	ld	r0, Z+
    226c:	00 20       	and	r0, r0
    226e:	e9 f7       	brne	.-6      	; 0x226a <strlen+0x2>
    2270:	80 95       	com	r24
    2272:	90 95       	com	r25
    2274:	8e 0f       	add	r24, r30
    2276:	9f 1f       	adc	r25, r31
    2278:	08 95       	ret

0000227a <_exit>:
    227a:	f8 94       	cli

0000227c <__stop_program>:
    227c:	ff cf       	rjmp	.-2      	; 0x227c <__stop_program>
